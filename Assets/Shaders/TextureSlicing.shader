Shader "Volume Rendering/Texture Slicing" 
{
	Properties 
	{
	    _VolumeRed ("Texture Red", 3D) = "" {}
	    _VolumeGreen ("Texture Green", 3D) = "" {}
	    _VolumeBlue ("Texture Blue", 3D) = "" {}
	    _VolumePurple ("Texture Purple", 3D) = "" {}
		
		_ROIMask3D("ROI Mask 3D", 3D) = "" {}

		_ROI_XY("ROI XY", 2D) = "" {}
		_ROI_XZ("ROI XZ", 2D) = "" {}
		_ROI_YZ("ROI YZ", 2D) = "" {}

	    //_ModelMatrix("Model Matrix", //TODO: can't set the propery??!

	    _BoxDim("Box Dim", Vector) = (1, 1, 1, 0)
	    _ROI_P1("ROI Point 1", Vector) = (0, 0, 0, 0)
	    _ROI_P2("ROI Point 2", Vector) = (1, 1, 1, 0)
	    _BoxDim("Box Dim", Vector) = (1, 1, 1, 0)
	    _Threshold("Threhold", Range(0.0, 0.5)) = 0.06
	    _Opacity("Opacity", Range(0.0, 0.5)) = 0.05

	    _redOpacity("Red Opacity", Range(0.0, 1.0)) = 1.0
	    _greenOpacity("Green Opacity", Range(0.0, 1.0)) = 1.0
	    _blueOpacity("Blue Opacity", Range(0.0, 1.0)) = 1.0
	    _purpleOpacity("Purple Opacity", Range(0.0, 1.0)) = 1.0

		_redOnOff("Red OnOff", Range(0.0, 1.0)) = 1.0
	    _greenOnOff("Green OnOff", Range(0.0, 1.0)) = 1.0
	    _blueOnOff("Blue OnOff", Range(0.0, 1.0)) = 1.0
	    _purpleOnOff("Purple OnOff", Range(0.0, 1.0)) = 1.0

	    _colocalizationMethod("Colocalization Method", Int) = 3
	    _colThresIntervalDisplay("Colocalization Interval Display", Int) = 0
	    _colChannel0("First Colocalization Channel", Int) = 0
	    _colChannel1("Second Colocalization Channel", Int) = 1
	    _chan0ThresholdHigh("Chan0 Threshold High", Range(0.0, 1.0)) = 0.5
	    _chan1ThresholdHigh("Chan1 Threshold High", Range(0.0, 1.0)) = 0.5
	    _chan0ThresholdLow("Chan0 Threshold Low", Range(0.0, 1.0)) = 0.0
	    _chan1ThresholdLow("Chan1 Threshold Low", Range(0.0, 1.0)) = 0.0
	    _colocalizationOpacity("Colocalization Opacity", Range(0.0, 1.0)) = 1.0
		_maxValue("Max Coloc Value", Range(0.0, 1.0)) = 1.0
		_x_max("x_max value", Range(0.0, 1.0)) = 1.0

		_ch0Average("Channel 0 average", Range(0.0, 1.0)) = 1.0
		_ch1Average("Channel 1 average", Range(0.0, 1.0)) = 1.0
		_ch0AverageAboveThres("Channel 0 average above thresholds", Range(0.0, 1.0)) = 1.0
		_ch1AverageAboveThres("Channel 1 average above thresholds", Range(0.0, 1.0)) = 1.0
		_ch0Max("Channel 0 Max", Range(0.0, 1.0)) = 1.0
		_ch1Max("Channel 1 Max", Range(0.0, 1.0)) = 1.0
		_MOC_denom("MOC Denominator", float) = 0.0
		_PCC_denom("PCC Denominator", float) = 0.0


		_ch0AverageNMDP("Channel 0 average NMDP", Range(0.0, 1.0)) = 1.0
		_ch1AverageNMDP("Channel 1 average NMDP", Range(0.0, 1.0)) = 1.0
		_ch0MaxNMDP("Channel 0 Max NMDP", Range(0.0, 1.0)) = 1.0
		_ch1MaxNMDP("Channel 1 Max NMDP", Range(0.0, 1.0)) = 1.0

		_p1("Line P1", Vector) = (0, 0, 0, 0)
		_p2("Line P2", Vector) = (1, 1, 0, 0)
		_distThresh("Distance Threshold", Range(1.0, 255.0)) = 1.0
		_angle("Distance Angle", Range(0.001, 89.99)) = 60.0

		_nmdp_minMultFactor("nMDP minimum multiplication", float) = 1.0
		_nmdp_maxMultFactor("nMDP maximum multiplication", float) = 1.0

		_useROIMask("Whether the ROI Mask must be shown", Range(0.0, 1.0)) = 0.0
	}

	SubShader 
	{
		Tags { "Queue" = "Transparent" "RenderType" = "Transparent"}
		ZWrite Off	// this is good for transparent cases (I have to test this, for when things are in front, does it still draw?)

		Blend SrcAlpha OneMinusSrcAlpha, One One

		Pass 
		{		 
			CGPROGRAM
			#pragma vertex vert
			#pragma fragment frag
			#pragma exclude_renderers flash gles
			 
			#include "UnityCG.cginc"

			sampler3D _VolumeRed;
			sampler3D _VolumeGreen;
			sampler3D _VolumeBlue;
			sampler3D _VolumePurple;

			sampler3D _ROIMask3D;

			sampler2D _ROI_XY;
			sampler2D _ROI_XZ;
			sampler2D _ROI_YZ;

			uniform float4 _BoxDim;
			uniform float4 _ROI_P1;
			uniform float4 _ROI_P2;
			uniform float _Opacity;
			uniform float _Threshold;

			uniform float4 _p1;
			uniform float4 _p2;
			
			uniform float _distThresh;
			uniform float _x_max;
			uniform float _angle;

			uniform float _redOpacity;
			uniform float _greenOpacity;
			uniform float _blueOpacity;
			uniform float _purpleOpacity;

			uniform float _redOnOff;
			uniform float _greenOnOff;
			uniform float _blueOnOff;
			uniform float _purpleOnOff;

			uniform float _useROIMask;

			uniform float4x4 _ModelMatrix;

			//colocalization
			uniform int _colocalizationMethod;	// the way the colocalization should be shown
			uniform int _colThresIntervalDisplay;	// draw 0 = above high, 1 = between low and high, 2 = below low
			uniform int _colChannel0;			// the first channel that will be used for colocalization
			uniform int _colChannel1;			// the second channel that will be used for colocalization
			uniform float _chan0ThresholdHigh;		// the high threshold for channel 0 to determine colocalization
			uniform float _chan1ThresholdHigh;		// the high threshold for channel 1 to determine colocalization
			uniform float _chan0ThresholdLow;		// the low threshold for channel 0 to determine colocalization
			uniform float _chan1ThresholdLow;		// the low threshold for channel 1 to determine colocalization
			uniform float _colocalizationOpacity;// the opacity of the colocalized area
			uniform float _maxValue;

			uniform float _ch0Average;
			uniform float _ch1Average;
			uniform float _ch0AverageAboveThres;
			uniform float _ch1AverageAboveThres;

			uniform float _ch0AverageNMDP;
			uniform float _ch1AverageNMDP;
			uniform float _ch0MaxNMDP;
			uniform float _ch1MaxNMDP;

			uniform float _ch0Max;
			uniform float _ch1Max;
			uniform float _MOC_denom;
			uniform float _PCC_denom;

			uniform float _nmdp_minMultFactor;
			uniform float _nmdp_maxMultFactor;

		 
			struct vertInput 
			{
			    float4 vertex : POSITION;
			};
			 
			struct fragInput 
			{
			    float4 pos : SV_POSITION;
			    float3 uv : TEXCOORD0;
			};
			 
			// Vertex Shader
			fragInput vert (vertInput v)
			{
			    fragInput o;
			    o.pos = mul (UNITY_MATRIX_MVP, v.vertex);

			    float w = 1.0;//_BoxDim.x;
			    float h = 1.0;//_BoxDim.y;
			    float d = 1.0;//_BoxDim.z;

//			    o.uv = float3((v.vertex.x + w / 2.0) / w, 1.0 - (v.vertex.y + h / 2.0) / h, (v.vertex.z + d / 2.0) / d);//float3(v.vertex.x, v.vertex.y, v.vertex.z);
				//o.uv = float3(v.vertex.x + 0.5, v.vertex.y + 0.5, v.vertex.z + 0.5);
				o.uv = float3(v.vertex.x + 0.5, v.vertex.y + 0.5, v.vertex.z + 0.5);
				o.uv = float3(_ROI_P1.x + o.uv.x*(_ROI_P2.x - _ROI_P1.x), _ROI_P1.y + o.uv.y*(_ROI_P2.y - _ROI_P1.y), _ROI_P1.z + o.uv.z*(_ROI_P2.z - _ROI_P1.z));

			    return o;
			}

			float3 HeatMapColor(float val, float min, float max)
			{
 				//float v = (float)(val - min) / (float)(max-min);
				float diff = max - min;
				float diffFraction = diff / 6.0;
				float positions[7] = { min, diffFraction + min, diffFraction * 2 + min, diffFraction * 3 + min, diffFraction * 4 + min, diffFraction * 5 + min, diffFraction * 6 + min }; //  the positions at which colors change

																																														// first interval (blue increases)
				if (val > positions[0] && val < positions[1])
				{
					float v = ((1.0)*val - positions[0]) / ((1.0)*positions[1] - positions[0]);
					return float3(0.0, 0.0, v);
				}

				// second interval (blue constant, green grows)
				if (val > positions[1] && val < positions[2])
				{
					float v = ((1.0)*val - positions[1]) / ((1.0)*positions[2] - positions[1]);
					return float3(0.0, v, 1.0);
				}

				// third interval (blue decrease, green constant)
				if (val > positions[2] && val < positions[3])
				{
					float v = ((1.0)*val - positions[2]) / ((1.0)*positions[3] - positions[2]);
					return float3(0.0, 1.0, (1 - v));
				}

				// fourth interval (red increases, green constant)
				if (val > positions[3] && val < positions[4])
				{
					float v = ((1.0)*val - positions[3]) / ((1.0)*positions[4] - positions[3]);
					return float3(v, 1.0, 0.0);
				}

				// fifth interval (red constnat, green decrease)
				if (val > positions[4] && val < positions[5])
				{
					float v = ((1.0)*val - positions[4]) / ((1.0)*positions[5] - positions[4]);
					return float3(1.0, (1 - v), 0.0);
				}

				// sixth interval (red constnat, blue and green increase)
				if (val > positions[5] && val < positions[6])
				{
					float v = ((1.0)*val - positions[5]) / ((1.0)*positions[6] - positions[5]);
					return float3(1.0, v, v);
				}

				if (val > max)
					return float3(1.0, 1.0, 1.0);

				return float3(0.0, 0.0, 0.0);
			}

			float3 HeatMapColorRainbow(float val, float min, float max)
			{
				//float v = (float)(val - min) / (float)(max-min);
				float diff = max - min;
				float diffFraction = diff / 7.0;
				float positions[8] = { min, diffFraction + min, diffFraction * 2 + min, diffFraction * 3 + min, diffFraction * 4 + min, diffFraction * 5 + min, diffFraction * 6 + min, diffFraction * 7 + min }; //  the positions at which colors change

																																													  // first interval (blue increases)
				if (val > positions[0] && val < positions[1])
				{
					float v = ((1.0)*val - positions[0]) / ((1.0)*positions[1] - positions[0]);
					return float3(0.0, 0.0, v);
				}

				// second interval (blue constant, green grows)
				if (val > positions[1] && val < positions[2])
				{
					float v = ((1.0)*val - positions[1]) / ((1.0)*positions[2] - positions[1]);
					return float3(0.0, v, 1.0);
				}

				// third interval (blue decrease, green constant)
				if (val > positions[2] && val < positions[3])
				{
					float v = ((1.0)*val - positions[2]) / ((1.0)*positions[3] - positions[2]);
					return float3(0.0, 1.0, (1.0 - v));
				}

				// fourth interval (red increases, green constant)
				if (val > positions[3] && val < positions[4])
				{
					float v = ((1.0)*val - positions[3]) / ((1.0)*positions[4] - positions[3]);
					return float3(v, 1.0, 0.0);
				}

				// fifth interval (red constnat, green decrease)
				if (val > positions[4] && val < positions[5])
				{
					float v = ((1.0)*val - positions[4]) / ((1.0)*positions[5] - positions[4]);
					return float3(1.0, (1.0 - v), 0.0);
				}

				// sixth interval (red constant, blue increases)
				if (val > positions[5] && val < positions[6])
				{
					float v = ((1.0)*val - positions[5]) / ((1.0)*positions[6] - positions[5]);
					return float3(1.0, 0.0, v);
				}

				// seventh interval (red constant, blue constant, green increases to white)
				if (val > positions[6] && val < positions[7])
				{
					float v = ((1.0)*val - positions[6]) / ((1.0)*positions[7] - positions[6]);
					return float3(1.0, v, 1.0);
				}

				if (val > max)
					return float3(1.0, 1.0, 1.0);

				return float3(0.0, 0.0, 0.0);


				
			}

			float3 HeatMapArray(int val)
			{
				float3 heatmap[256] = {
				float3(0, 0,0),
				float3(0, 0,57),
				float3(0, 0,74),
				float3(0, 0,87),
				float3(0, 0,98),
				float3(0, 0,108),
				float3(0, 0,117),
				float3(0, 0,125),
				float3(0, 0,133),
				float3(0, 0,139),
				float3(0, 0,146),
				float3(0, 0,152),
				float3(0, 0,158),
				float3(0, 0,163),
				float3(0, 0,169),
				float3(0, 0,174),
				float3(0, 0,179),
				float3(0, 0,184),
				float3(0, 0,188),
				float3(0, 0,193),
				float3(0, 0,198),
				float3(0, 0,202),
				float3(0, 0,206),
				float3(0, 0,210),
				float3(0, 0,214),
				float3(0, 0,218),
				float3(0, 0,221),
				float3(0, 0,225),
				float3(0, 0,228),
				float3(0, 0,232),
				float3(0, 0,235),
				float3(0, 0,239),
				float3(0, 0,242),
				float3(0, 0,245),
				float3(0, 0,248),
				float3(0, 0,252),
				float3(0, 7,255),
				float3(0, 44,255),
				float3(0, 65,255),
				float3(0, 80,255),
				float3(0, 92,255),
				float3(0, 103,255),
				float3(0, 112,255),
				float3(0, 121,255),
				float3(0, 128,255),
				float3(0, 135,255),
				float3(0, 142,255),
				float3(0, 149,255),
				float3(0, 155,255),
				float3(0, 160,255),
				float3(0, 166,255),
				float3(0, 171,255),
				float3(0, 176,255),
				float3(0, 181,255),
				float3(0, 186,255),
				float3(0, 190,255),
				float3(0, 195,255),
				float3(0, 199,255),
				float3(0, 203,255),
				float3(0, 207,255),
				float3(0, 211,255),
				float3(0, 215,255),
				float3(0, 219,255),
				float3(0, 223,255),
				float3(0, 227,255),
				float3(0, 230,255),
				float3(0, 233,255),
				float3(0, 237,255),
				float3(0, 240,255),
				float3(0, 243,255),
				float3(0, 247,255),
				float3(0, 250,255),
				float3(0, 253,255),
				float3(0, 255,254),
				float3(0, 255,251),
				float3(0, 255,248),
				float3(0, 255,245),
				float3(0, 255,241),
				float3(0, 255,238),
				float3(0, 255,234),
				float3(0, 255,231),
				float3(0, 255,227),
				float3(0, 255,224),
				float3(0, 255,220),
				float3(0, 255,216),
				float3(0, 255,213),
				float3(0, 255,209),
				float3(0, 255,205),
				float3(0, 255,200),
				float3(0, 255,196),
				float3(0, 255,192),
				float3(0, 255,187),
				float3(0, 255,183),
				float3(0, 255,178),
				float3(0, 255,173),
				float3(0, 255,168),
				float3(0, 255,162),
				float3(0, 255,156),
				float3(0, 255,150),
				float3(0, 255,144),
				float3(0, 255,137),
				float3(0, 255,130),
				float3(0, 255,123),
				float3(0, 255,114),
				float3(0, 255,105),
				float3(0, 255,95),
				float3(0, 255,83),
				float3(0, 255,69),
				float3(0, 255,51),
				float3(4, 255,16),
				float3(40, 255,0),
				float3(62, 255,0),
				float3(78, 255,0),
				float3(91, 255,0),
				float3(101, 255,0),
				float3(111, 255,0),
				float3(119, 255,0),
				float3(127, 255,0),
				float3(135, 255,0),
				float3(141, 255,0),
				float3(148, 255,0),
				float3(154, 255,0),
				float3(160, 255,0),
				float3(165, 255,0),
				float3(171, 255,0),
				float3(176, 255,0),
				float3(181, 255,0),
				float3(185, 255,0),
				float3(190, 255,0),
				float3(194, 255,0),
				float3(198, 255,0),
				float3(203, 255,0),
				float3(207, 255,0),
				float3(211, 255,0),
				float3(215, 255,0),
				float3(219, 255,0),
				float3(222, 255,0),
				float3(226, 255,0),
				float3(230, 255,0),
				float3(233, 255,0),
				float3(236, 255,0),
				float3(241, 255,0),
				float3(241, 255,0),
				float3(246, 255,0),
				float3(249, 255,0),
				float3(254, 254,0),
				float3(254, 254,0),
				float3(255, 251,0),
				float3(255, 248,0),
				float3(255, 245,0),
				float3(255, 242,0),
				float3(255, 238,0),
				float3(255, 235,0),
				float3(255, 232,0),
				float3(255, 228,0),
				float3(255, 224,0),
				float3(255, 221,0),
				float3(255, 217,0),
				float3(255, 213,0),
				float3(255, 209,0),
				float3(255, 205,0),
				float3(255, 201,0),
				float3(255, 197,0),
				float3(255, 192,0),
				float3(255, 188,0),
				float3(255, 183,0),
				float3(255, 178,0),
				float3(255, 173,0),
				float3(255, 168,0),
				float3(255, 163,0),
				float3(255, 157,0),
				float3(255, 151,0),
				float3(255, 145,0),
				float3(255, 138,0),
				float3(255, 131,0),
				float3(255, 124,0),
				float3(255, 116,0),
				float3(255, 107,0),
				float3(255, 97,0),
				float3(255, 85,0),
				float3(255, 71,0),
				float3(255, 54,0),
				float3(255, 22,1),
				float3(255, 0,35),
				float3(255, 0,60),
				float3(255, 0,76),
				float3(255, 0,89),
				float3(255, 0,100),
				float3(255, 0,110),
				float3(255, 0,118),
				float3(255, 0,126),
				float3(255, 0,134),
				float3(255, 0,140),
				float3(255, 0,147),
				float3(255, 0,153),
				float3(255, 0,159),
				float3(255, 0,165),
				float3(255, 0,170),
				float3(255, 0,175),
				float3(255, 0,180),
				float3(255, 0,185),
				float3(255, 0,189),
				float3(255, 0,194),
				float3(255, 0,198),
				float3(255, 0,202),
				float3(255, 0,206),
				float3(255, 0,210),
				float3(255, 0,214),
				float3(255, 0,218),
				float3(255, 0,222),
				float3(255, 0,225),
				float3(255, 0,229),
				float3(255, 0,233),
				float3(255, 0,236),
				float3(255, 0,239),
				float3(255, 0,242),
				float3(255, 0,246),
				float3(255, 0,249),
				float3(255, 0,252),
				float3(255, 11,255),
				float3(255, 48,255),
				float3(255, 67,255),
				float3(255, 82,255),
				float3(255, 94,255),
				float3(255, 104,255),
				float3(255, 113,255),
				float3(255, 122,255),
				float3(255, 129,255),
				float3(255, 137,255),
				float3(255, 143,255),
				float3(255, 149,255),
				float3(255, 155,255),
				float3(255, 161,255),
				float3(255, 167,255),
				float3(255, 172,255),
				float3(255, 177,255),
				float3(255, 182,255),
				float3(255, 187,255),
				float3(255, 191,255),
				float3(255, 196,255),
				float3(255, 200,255),
				float3(255, 204,255),
				float3(255, 208,255),
				float3(255, 212,255),
				float3(255, 216,255),
				float3(255, 220,255),
				float3(255, 223,255),
				float3(255, 227,255),
				float3(255, 230,255),
				float3(255, 234,255),
				float3(255, 237,255),
				float3(255, 241,255),
				float3(255, 244,255),
				float3(255, 247,255),
				float3(255, 250,255),
				float3(255, 254,255)};

				return heatmap[val]/255;
			}

			float3 HeatMapArrayViridis(int val)
			{
				float3 heatmap[256] = { float3(0.26700401,  0.00487433,  0.32941519),
					float3(0.26851048,  0.00960483,  0.33542652),
					float3(0.26994384,  0.01462494,  0.34137895),
					float3(0.27130489,  0.01994186,  0.34726862),
					float3(0.27259384,  0.02556309,  0.35309303),
					float3(0.27380934,  0.03149748,  0.35885256),
					float3(0.27495242,  0.03775181,  0.36454323),
					float3(0.27602238,  0.04416723,  0.37016418),
					float3(0.2770184 ,  0.05034437,  0.37571452),
					float3(0.27794143,  0.05632444,  0.38119074),
					float3(0.27879067,  0.06214536,  0.38659204),
					float3(0.2795655 ,  0.06783587,  0.39191723),
					float3(0.28026658,  0.07341724,  0.39716349),
					float3(0.28089358,  0.07890703,  0.40232944),
					float3(0.28144581,  0.0843197 ,  0.40741404),
					float3(0.28192358,  0.08966622,  0.41241521),
					float3(0.28232739,  0.09495545,  0.41733086),
					float3(0.28265633,  0.10019576,  0.42216032),
					float3(0.28291049,  0.10539345,  0.42690202),
					float3(0.28309095,  0.11055307,  0.43155375),
					float3(0.28319704,  0.11567966,  0.43611482),
					float3(0.28322882,  0.12077701,  0.44058404),
					float3(0.28318684,  0.12584799,  0.44496),
					float3(0.283072  ,  0.13089477,  0.44924127),
					float3(0.28288389,  0.13592005,  0.45342734),
					float3(0.28262297,  0.14092556,  0.45751726),
					float3(0.28229037,  0.14591233,  0.46150995),
					float3(0.28188676,  0.15088147,  0.46540474),
					float3(0.28141228,  0.15583425,  0.46920128),
					float3(0.28086773,  0.16077132,  0.47289909),
					float3(0.28025468,  0.16569272,  0.47649762),
					float3(0.27957399,  0.17059884,  0.47999675),
					float3(0.27882618,  0.1754902 ,  0.48339654),
					float3(0.27801236,  0.18036684,  0.48669702),
					float3(0.27713437,  0.18522836,  0.48989831),
					float3(0.27619376,  0.19007447,  0.49300074),
					float3(0.27519116,  0.1949054 ,  0.49600488),
					float3(0.27412802,  0.19972086,  0.49891131),
					float3(0.27300596,  0.20452049,  0.50172076),
					float3(0.27182812,  0.20930306,  0.50443413),
					float3(0.27059473,  0.21406899,  0.50705243),
					float3(0.26930756,  0.21881782,  0.50957678),
					float3(0.26796846,  0.22354911,  0.5120084),
					float3(0.26657984,  0.2282621 ,  0.5143487),
					float3(0.2651445 ,  0.23295593,  0.5165993),
					float3(0.2636632 ,  0.23763078,  0.51876163),
					float3(0.26213801,  0.24228619,  0.52083736),
					float3(0.26057103,  0.2469217 ,  0.52282822),
					float3(0.25896451,  0.25153685,  0.52473609),
					float3(0.25732244,  0.2561304 ,  0.52656332),
					float3(0.25564519,  0.26070284,  0.52831152),
					float3(0.25393498,  0.26525384,  0.52998273),
					float3(0.25219404,  0.26978306,  0.53157905),
					float3(0.25042462,  0.27429024,  0.53310261),
					float3(0.24862899,  0.27877509,  0.53455561),
					float3(0.2468114 ,  0.28323662,  0.53594093),
					float3(0.24497208,  0.28767547,  0.53726018),
					float3(0.24311324,  0.29209154,  0.53851561),
					float3(0.24123708,  0.29648471,  0.53970946),
					float3(0.23934575,  0.30085494,  0.54084398),
					float3(0.23744138,  0.30520222,  0.5419214),
					float3(0.23552606,  0.30952657,  0.54294396),
					float3(0.23360277,  0.31382773,  0.54391424),
					float3(0.2316735 ,  0.3181058 ,  0.54483444),
					float3(0.22973926,  0.32236127,  0.54570633),
					float3(0.22780192,  0.32659432,  0.546532),
					float3(0.2258633 ,  0.33080515,  0.54731353),
					float3(0.22392515,  0.334994  ,  0.54805291),
					float3(0.22198915,  0.33916114,  0.54875211),
					float3(0.22005691,  0.34330688,  0.54941304),
					float3(0.21812995,  0.34743154,  0.55003755),
					float3(0.21620971,  0.35153548,  0.55062743),
					float3(0.21429757,  0.35561907,  0.5511844),
					float3(0.21239477,  0.35968273,  0.55171011),
					float3(0.2105031 ,  0.36372671,  0.55220646),
					float3(0.20862342,  0.36775151,  0.55267486),
					float3(0.20675628,  0.37175775,  0.55311653),
					float3(0.20490257,  0.37574589,  0.55353282),
					float3(0.20306309,  0.37971644,  0.55392505),
					float3(0.20123854,  0.38366989,  0.55429441),
					float3(0.1994295 ,  0.38760678,  0.55464205),
					float3(0.1976365 ,  0.39152762,  0.55496905),
					float3(0.19585993,  0.39543297,  0.55527637),
					float3(0.19410009,  0.39932336,  0.55556494),
					float3(0.19235719,  0.40319934,  0.55583559),
					float3(0.19063135,  0.40706148,  0.55608907),
					float3(0.18892259,  0.41091033,  0.55632606),
					float3(0.18723083,  0.41474645,  0.55654717),
					float3(0.18555593,  0.4185704 ,  0.55675292),
					float3(0.18389763,  0.42238275,  0.55694377),
					float3(0.18225561,  0.42618405,  0.5571201),
					float3(0.18062949,  0.42997486,  0.55728221),
					float3(0.17901879,  0.43375572,  0.55743035),
					float3(0.17742298,  0.4375272 ,  0.55756466),
					float3(0.17584148,  0.44128981,  0.55768526),
					float3(0.17427363,  0.4450441 ,  0.55779216),
					float3(0.17271876,  0.4487906 ,  0.55788532),
					float3(0.17117615,  0.4525298 ,  0.55796464),
					float3(0.16964573,  0.45626209,  0.55803034),
					float3(0.16812641,  0.45998802,  0.55808199),
					float3(0.1666171 ,  0.46370813,  0.55811913),
					float3(0.16511703,  0.4674229 ,  0.55814141),
					float3(0.16362543,  0.47113278,  0.55814842),
					float3(0.16214155,  0.47483821,  0.55813967),
					float3(0.16066467,  0.47853961,  0.55811466),
					float3(0.15919413,  0.4822374 ,  0.5580728),
					float3(0.15772933,  0.48593197,  0.55801347),
					float3(0.15626973,  0.4896237 ,  0.557936),
					float3(0.15481488,  0.49331293,  0.55783967),
					float3(0.15336445,  0.49700003,  0.55772371),
					float3(0.1519182 ,  0.50068529,  0.55758733),
					float3(0.15047605,  0.50436904,  0.55742968),
					float3(0.14903918,  0.50805136,  0.5572505),
					float3(0.14760731,  0.51173263,  0.55704861),
					float3(0.14618026,  0.51541316,  0.55682271),
					float3(0.14475863,  0.51909319,  0.55657181),
					float3(0.14334327,  0.52277292,  0.55629491),
					float3(0.14193527,  0.52645254,  0.55599097),
					float3(0.14053599,  0.53013219,  0.55565893),
					float3(0.13914708,  0.53381201,  0.55529773),
					float3(0.13777048,  0.53749213,  0.55490625),
					float3(0.1364085 ,  0.54117264,  0.55448339),
					float3(0.13506561,  0.54485335,  0.55402906),
					float3(0.13374299,  0.54853458,  0.55354108),
					float3(0.13244401,  0.55221637,  0.55301828),
					float3(0.13117249,  0.55589872,  0.55245948),
					float3(0.1299327 ,  0.55958162,  0.55186354),
					float3(0.12872938,  0.56326503,  0.55122927),
					float3(0.12756771,  0.56694891,  0.55055551),
					float3(0.12645338,  0.57063316,  0.5498411),
					float3(0.12539383,  0.57431754,  0.54908564),
					float3(0.12439474,  0.57800205,  0.5482874),
					float3(0.12346281,  0.58168661,  0.54744498),
					float3(0.12260562,  0.58537105,  0.54655722),
					float3(0.12183122,  0.58905521,  0.54562298),
					float3(0.12114807,  0.59273889,  0.54464114),
					float3(0.12056501,  0.59642187,  0.54361058),
					float3(0.12009154,  0.60010387,  0.54253043),
					float3(0.11973756,  0.60378459,  0.54139999),
					float3(0.11951163,  0.60746388,  0.54021751),
					float3(0.11942341,  0.61114146,  0.53898192),
					float3(0.11948255,  0.61481702,  0.53769219),
					float3(0.11969858,  0.61849025,  0.53634733),
					float3(0.12008079,  0.62216081,  0.53494633),
					float3(0.12063824,  0.62582833,  0.53348834),
					float3(0.12137972,  0.62949242,  0.53197275),
					float3(0.12231244,  0.63315277,  0.53039808),
					float3(0.12344358,  0.63680899,  0.52876343),
					float3(0.12477953,  0.64046069,  0.52706792),
					float3(0.12632581,  0.64410744,  0.52531069),
					float3(0.12808703,  0.64774881,  0.52349092),
					float3(0.13006688,  0.65138436,  0.52160791),
					float3(0.13226797,  0.65501363,  0.51966086),
					float3(0.13469183,  0.65863619,  0.5176488),
					float3(0.13733921,  0.66225157,  0.51557101),
					float3(0.14020991,  0.66585927,  0.5134268),
					float3(0.14330291,  0.66945881,  0.51121549),
					float3(0.1466164 ,  0.67304968,  0.50893644),
					float3(0.15014782,  0.67663139,  0.5065889),
					float3(0.15389405,  0.68020343,  0.50417217),
					float3(0.15785146,  0.68376525,  0.50168574),
					float3(0.16201598,  0.68731632,  0.49912906),
					float3(0.1663832 ,  0.69085611,  0.49650163),
					float3(0.1709484 ,  0.69438405,  0.49380294),
					float3(0.17570671,  0.6978996 ,  0.49103252),
					float3(0.18065314,  0.70140222,  0.48818938),
					float3(0.18578266,  0.70489133,  0.48527326),
					float3(0.19109018,  0.70836635,  0.48228395),
					float3(0.19657063,  0.71182668,  0.47922108),
					float3(0.20221902,  0.71527175,  0.47608431),
					float3(0.20803045,  0.71870095,  0.4728733),
					float3(0.21400015,  0.72211371,  0.46958774),
					float3(0.22012381,  0.72550945,  0.46622638),
					float3(0.2263969 ,  0.72888753,  0.46278934),
					float3(0.23281498,  0.73224735,  0.45927675),
					float3(0.2393739 ,  0.73558828,  0.45568838),
					float3(0.24606968,  0.73890972,  0.45202405),
					float3(0.25289851,  0.74221104,  0.44828355),
					float3(0.25985676,  0.74549162,  0.44446673),
					float3(0.26694127,  0.74875084,  0.44057284),
					float3(0.27414922,  0.75198807,  0.4366009),
					float3(0.28147681,  0.75520266,  0.43255207),
					float3(0.28892102,  0.75839399,  0.42842626),
					float3(0.29647899,  0.76156142,  0.42422341),
					float3(0.30414796,  0.76470433,  0.41994346),
					float3(0.31192534,  0.76782207,  0.41558638),
					float3(0.3198086 ,  0.77091403,  0.41115215),
					float3(0.3277958 ,  0.77397953,  0.40664011),
					float3(0.33588539,  0.7770179 ,  0.40204917),
					float3(0.34407411,  0.78002855,  0.39738103),
					float3(0.35235985,  0.78301086,  0.39263579),
					float3(0.36074053,  0.78596419,  0.38781353),
					float3(0.3692142 ,  0.78888793,  0.38291438),
					float3(0.37777892,  0.79178146,  0.3779385),
					float3(0.38643282,  0.79464415,  0.37288606),
					float3(0.39517408,  0.79747541,  0.36775726),
					float3(0.40400101,  0.80027461,  0.36255223),
					float3(0.4129135 ,  0.80304099,  0.35726893),
					float3(0.42190813,  0.80577412,  0.35191009),
					float3(0.43098317,  0.80847343,  0.34647607),
					float3(0.44013691,  0.81113836,  0.3409673),
					float3(0.44936763,  0.81376835,  0.33538426),
					float3(0.45867362,  0.81636288,  0.32972749),
					float3(0.46805314,  0.81892143,  0.32399761),
					float3(0.47750446,  0.82144351,  0.31819529),
					float3(0.4870258 ,  0.82392862,  0.31232133),
					float3(0.49661536,  0.82637633,  0.30637661),
					float3(0.5062713 ,  0.82878621,  0.30036211),
					float3(0.51599182,  0.83115784,  0.29427888),
					float3(0.52577622,  0.83349064,  0.2881265),
					float3(0.5356211 ,  0.83578452,  0.28190832),
					float3(0.5455244 ,  0.83803918,  0.27562602),
					float3(0.55548397,  0.84025437,  0.26928147),
					float3(0.5654976 ,  0.8424299 ,  0.26287683),
					float3(0.57556297,  0.84456561,  0.25641457),
					float3(0.58567772,  0.84666139,  0.24989748),
					float3(0.59583934,  0.84871722,  0.24332878),
					float3(0.60604528,  0.8507331 ,  0.23671214),
					float3(0.61629283,  0.85270912,  0.23005179),
					float3(0.62657923,  0.85464543,  0.22335258),
					float3(0.63690157,  0.85654226,  0.21662012),
					float3(0.64725685,  0.85839991,  0.20986086),
					float3(0.65764197,  0.86021878,  0.20308229),
					float3(0.66805369,  0.86199932,  0.19629307),
					float3(0.67848868,  0.86374211,  0.18950326),
					float3(0.68894351,  0.86544779,  0.18272455),
					float3(0.69941463,  0.86711711,  0.17597055),
					float3(0.70989842,  0.86875092,  0.16925712),
					float3(0.72039115,  0.87035015,  0.16260273),
					float3(0.73088902,  0.87191584,  0.15602894),
					float3(0.74138803,  0.87344918,  0.14956101),
					float3(0.75188414,  0.87495143,  0.14322828),
					float3(0.76237342,  0.87642392,  0.13706449),
					float3(0.77285183,  0.87786808,  0.13110864),
					float3(0.78331535,  0.87928545,  0.12540538),
					float3(0.79375994,  0.88067763,  0.12000532),
					float3(0.80418159,  0.88204632,  0.11496505),
					float3(0.81457634,  0.88339329,  0.11034678),
					float3(0.82494028,  0.88472036,  0.10621724),
					float3(0.83526959,  0.88602943,  0.1026459),
					float3(0.84556056,  0.88732243,  0.09970219),
					float3(0.8558096 ,  0.88860134,  0.09745186),
					float3(0.86601325,  0.88986815,  0.09595277),
					float3(0.87616824,  0.89112487,  0.09525046),
					float3(0.88627146,  0.89237353,  0.09537439),
					float3(0.89632002,  0.89361614,  0.09633538),
					float3(0.90631121,  0.89485467,  0.09812496),
					float3(0.91624212,  0.89609127,  0.1007168),
					float3(0.92610579,  0.89732977,  0.10407067),
					float3(0.93590444,  0.8985704 ,  0.10813094),
					float3(0.94563626,  0.899815  ,  0.11283773),
					float3(0.95529972,  0.90106534,  0.11812832),
					float3(0.96489353,  0.90232311,  0.12394051),
					float3(0.97441665,  0.90358991,  0.13021494),
					float3(0.98386829,  0.90486726,  0.13689671),
					float3(0.99324789,  0.90615657,  0.1439362) };

				return heatmap[val];
			}

			float3 HeatMapArrayMagma(int val)
			{
				float3 heatmap[256] = { float3(0.0, 0.0,0.011764705882352941),
float3(0.0, 0.0,0.01568627450980392),
float3(0.0, 0.0,0.023529411764705882),
float3(0.00392156862745098, 0.0,0.027450980392156862),
float3(0.00392156862745098, 0.00392156862745098,0.03529411764705882),
float3(0.00392156862745098, 0.00392156862745098,0.043137254901960784),
float3(0.00784313725490196, 0.00784313725490196,0.050980392156862744),
float3(0.00784313725490196, 0.00784313725490196,0.058823529411764705),
float3(0.011764705882352941, 0.011764705882352941,0.06666666666666667),
float3(0.01568627450980392, 0.011764705882352941,0.07450980392156863),
float3(0.01568627450980392, 0.01568627450980392,0.08235294117647059),
float3(0.0196078431372549, 0.01568627450980392,0.09019607843137255),
float3(0.023529411764705882, 0.0196078431372549,0.09803921568627451),
float3(0.027450980392156862, 0.0196078431372549,0.10588235294117647),
float3(0.03137254901960784, 0.023529411764705882,0.11372549019607843),
float3(0.03529411764705882, 0.027450980392156862,0.12156862745098039),
float3(0.0392156862745098, 0.027450980392156862,0.13333333333333333),
float3(0.043137254901960784, 0.03137254901960784,0.1411764705882353),
float3(0.047058823529411764, 0.03529411764705882,0.14901960784313725),
float3(0.050980392156862744, 0.0392156862745098,0.1568627450980392),
float3(0.054901960784313725, 0.0392156862745098,0.16470588235294117),
float3(0.058823529411764705, 0.043137254901960784,0.17254901960784313),
float3(0.06274509803921569, 0.047058823529411764,0.1843137254901961),
float3(0.06666666666666667, 0.047058823529411764,0.19215686274509805),
float3(0.07058823529411765, 0.050980392156862744,0.2),
float3(0.0784313725490196, 0.050980392156862744,0.20784313725490197),
float3(0.08235294117647059, 0.054901960784313725,0.2196078431372549),
float3(0.08627450980392157, 0.054901960784313725,0.22745098039215686),
float3(0.09019607843137255, 0.058823529411764705,0.23529411764705882),
float3(0.09411764705882353, 0.058823529411764705,0.24705882352941178),
float3(0.10196078431372549, 0.06274509803921569,0.2549019607843137),
float3(0.10588235294117647, 0.06274509803921569,0.26666666666666666),
float3(0.10980392156862745, 0.06274509803921569,0.27450980392156865),
float3(0.11764705882352941, 0.06274509803921569,0.28627450980392155),
float3(0.12156862745098039, 0.06666666666666667,0.29411764705882354),
float3(0.12549019607843137, 0.06666666666666667,0.30196078431372547),
float3(0.13333333333333333, 0.06666666666666667,0.3137254901960784),
float3(0.13725490196078433, 0.06666666666666667,0.3215686274509804),
float3(0.1450980392156863, 0.06666666666666667,0.3333333333333333),
float3(0.14901960784313725, 0.06666666666666667,0.3411764705882353),
float3(0.1568627450980392, 0.06666666666666667,0.34901960784313724),
float3(0.16470588235294117, 0.06666666666666667,0.3607843137254902),
float3(0.16862745098039217, 0.06666666666666667,0.3686274509803922),
float3(0.17647058823529413, 0.06274509803921569,0.3764705882352941),
float3(0.1843137254901961, 0.06274509803921569,0.3843137254901961),
float3(0.18823529411764706, 0.06274509803921569,0.396078431372549),
float3(0.19607843137254902, 0.06274509803921569,0.403921568627451),
float3(0.20392156862745098, 0.06274509803921569,0.40784313725490196),
float3(0.20784313725490197, 0.058823529411764705,0.41568627450980394),
float3(0.21568627450980393, 0.058823529411764705,0.4235294117647059),
float3(0.2235294117647059, 0.058823529411764705,0.43137254901960786),
float3(0.23137254901960785, 0.058823529411764705,0.43529411764705883),
float3(0.23529411764705882, 0.058823529411764705,0.44313725490196076),
float3(0.24313725490196078, 0.058823529411764705,0.4470588235294118),
float3(0.25098039215686274, 0.058823529411764705,0.45098039215686275),
float3(0.25882352941176473, 0.058823529411764705,0.4549019607843137),
float3(0.2627450980392157, 0.058823529411764705,0.4588235294117647),
float3(0.27058823529411763, 0.058823529411764705,0.4627450980392157),
float3(0.2784313725490196, 0.058823529411764705,0.4666666666666667),
float3(0.2823529411764706, 0.06274509803921569,0.47058823529411764),
float3(0.2901960784313726, 0.06274509803921569,0.4745098039215686),
float3(0.29411764705882354, 0.06274509803921569,0.4745098039215686),
float3(0.30196078431372547, 0.06666666666666667,0.47843137254901963),
float3(0.30980392156862746, 0.06666666666666667,0.4823529411764706),
float3(0.3137254901960784, 0.07058823529411765,0.4823529411764706),
float3(0.3215686274509804, 0.07058823529411765,0.48627450980392156),
float3(0.3254901960784314, 0.07450980392156863,0.48627450980392156),
float3(0.3333333333333333, 0.07450980392156863,0.49019607843137253),
float3(0.3411764705882353, 0.0784313725490196,0.49019607843137253),
float3(0.34509803921568627, 0.08235294117647059,0.49411764705882355),
float3(0.35294117647058826, 0.08235294117647059,0.49411764705882355),
float3(0.3568627450980392, 0.08627450980392157,0.49411764705882355),
float3(0.36470588235294116, 0.09019607843137255,0.49411764705882355),
float3(0.3686274509803922, 0.09019607843137255,0.4980392156862745),
float3(0.3764705882352941, 0.09411764705882353,0.4980392156862745),
float3(0.3803921568627451, 0.09411764705882353,0.4980392156862745),
float3(0.38823529411764707, 0.09803921568627451,0.4980392156862745),
float3(0.396078431372549, 0.10196078431372549,0.5019607843137255),
float3(0.4, 0.10196078431372549,0.5019607843137255),
float3(0.40784313725490196, 0.10588235294117647,0.5019607843137255),
float3(0.4117647058823529, 0.10980392156862745,0.5019607843137255),
float3(0.4196078431372549, 0.10980392156862745,0.5019607843137255),
float3(0.4235294117647059, 0.11372549019607843,0.5019607843137255),
float3(0.43137254901960786, 0.11764705882352941,0.5058823529411764),
float3(0.43529411764705883, 0.11764705882352941,0.5058823529411764),
float3(0.44313725490196076, 0.12156862745098039,0.5058823529411764),
float3(0.45098039215686275, 0.12156862745098039,0.5058823529411764),
float3(0.4549019607843137, 0.12549019607843137,0.5058823529411764),
float3(0.4627450980392157, 0.12941176470588237,0.5058823529411764),
float3(0.4666666666666667, 0.12941176470588237,0.5058823529411764),
float3(0.4745098039215686, 0.13333333333333333,0.5058823529411764),
float3(0.47843137254901963, 0.13333333333333333,0.5058823529411764),
float3(0.48627450980392156, 0.13725490196078433,0.5058823529411764),
float3(0.49411764705882355, 0.1411764705882353,0.5058823529411764),
float3(0.4980392156862745, 0.1411764705882353,0.5058823529411764),
float3(0.5058823529411764, 0.1450980392156863,0.5058823529411764),
float3(0.5098039215686274, 0.1450980392156863,0.5058823529411764),
float3(0.5176470588235295, 0.14901960784313725,0.5058823529411764),
float3(0.5215686274509804, 0.14901960784313725,0.5058823529411764),
float3(0.5294117647058824, 0.15294117647058825,0.5058823529411764),
float3(0.5372549019607843, 0.1568627450980392,0.5058823529411764),
float3(0.5411764705882353, 0.1568627450980392,0.5058823529411764),
float3(0.5490196078431373, 0.1607843137254902,0.5019607843137255),
float3(0.5529411764705883, 0.1607843137254902,0.5019607843137255),
float3(0.5607843137254902, 0.16470588235294117,0.5019607843137255),
float3(0.5686274509803921, 0.16470588235294117,0.5019607843137255),
float3(0.5725490196078431, 0.16862745098039217,0.5019607843137255),
float3(0.5803921568627451, 0.16862745098039217,0.5019607843137255),
float3(0.5843137254901961, 0.17254901960784313,0.5019607843137255),
float3(0.592156862745098, 0.17254901960784313,0.4980392156862745),
float3(0.6, 0.17647058823529413,0.4980392156862745),
float3(0.6039215686274509, 0.17647058823529413,0.4980392156862745),
float3(0.611764705882353, 0.1803921568627451,0.4980392156862745),
float3(0.6196078431372549, 0.1803921568627451,0.49411764705882355),
float3(0.6235294117647059, 0.1843137254901961,0.49411764705882355),
float3(0.6313725490196078, 0.1843137254901961,0.49411764705882355),
float3(0.6392156862745098, 0.18823529411764706,0.49411764705882355),
float3(0.6431372549019608, 0.18823529411764706,0.49019607843137253),
float3(0.6509803921568628, 0.19215686274509805,0.49019607843137253),
float3(0.6549019607843137, 0.19215686274509805,0.49019607843137253),
float3(0.6627450980392157, 0.19607843137254902,0.48627450980392156),
float3(0.6705882352941176, 0.2,0.48627450980392156),
float3(0.6745098039215687, 0.2,0.4823529411764706),
float3(0.6823529411764706, 0.20392156862745098,0.4823529411764706),
float3(0.6901960784313725, 0.20392156862745098,0.4823529411764706),
float3(0.6941176470588235, 0.20784313725490197,0.47843137254901963),
float3(0.7019607843137254, 0.20784313725490197,0.47843137254901963),
float3(0.7098039215686275, 0.21176470588235294,0.4745098039215686),
float3(0.7137254901960784, 0.21176470588235294,0.4745098039215686),
float3(0.7215686274509804, 0.21568627450980393,0.47058823529411764),
float3(0.7254901960784313, 0.21568627450980393,0.47058823529411764),
float3(0.7333333333333333, 0.2196078431372549,0.4666666666666667),
float3(0.7411764705882353, 0.2235294117647059,0.4666666666666667),
float3(0.7450980392156863, 0.2235294117647059,0.4627450980392157),
float3(0.7529411764705882, 0.22745098039215686,0.4588235294117647),
float3(0.7607843137254902, 0.22745098039215686,0.4588235294117647),
float3(0.7647058823529411, 0.23137254901960785,0.4549019607843137),
float3(0.7725490196078432, 0.23529411764705882,0.4549019607843137),
float3(0.7764705882352941, 0.23529411764705882,0.45098039215686275),
float3(0.7843137254901961, 0.23921568627450981,0.4470588235294118),
float3(0.792156862745098, 0.24313725490196078,0.4470588235294118),
float3(0.796078431372549, 0.24313725490196078,0.44313725490196076),
float3(0.803921568627451, 0.24705882352941178,0.4392156862745098),
float3(0.807843137254902, 0.25098039215686274,0.4392156862745098),
float3(0.8156862745098039, 0.2549019607843137,0.43529411764705883),
float3(0.8196078431372549, 0.25882352941176473,0.43137254901960786),
float3(0.8274509803921568, 0.25882352941176473,0.42745098039215684),
float3(0.8313725490196079, 0.2627450980392157,0.42745098039215684),
float3(0.8392156862745098, 0.26666666666666666,0.4235294117647059),
float3(0.8431372549019608, 0.27058823529411763,0.4196078431372549),
float3(0.8509803921568627, 0.27450980392156865,0.41568627450980394),
float3(0.8549019607843137, 0.2784313725490196,0.4117647058823529),
float3(0.8627450980392157, 0.2823529411764706,0.4117647058823529),
float3(0.8666666666666667, 0.28627450980392155,0.40784313725490196),
float3(0.8705882352941177, 0.2901960784313726,0.403921568627451),
float3(0.8784313725490196, 0.29411764705882354,0.4),
float3(0.8823529411764706, 0.2980392156862745,0.4),
float3(0.8862745098039215, 0.30196078431372547,0.396078431372549),
float3(0.8941176470588236, 0.3058823529411765,0.39215686274509803),
float3(0.8980392156862745, 0.3137254901960784,0.38823529411764707),
float3(0.9019607843137255, 0.3176470588235294,0.3843137254901961),
float3(0.9058823529411765, 0.3215686274509804,0.3843137254901961),
float3(0.9098039215686274, 0.32941176470588235,0.3803921568627451),
float3(0.9176470588235294, 0.3333333333333333,0.3764705882352941),
float3(0.9215686274509803, 0.33725490196078434,0.3764705882352941),
float3(0.9254901960784314, 0.34509803921568627,0.37254901960784315),
float3(0.9294117647058824, 0.34901960784313724,0.37254901960784315),
float3(0.9333333333333333, 0.3568627450980392,0.3686274509803922),
float3(0.9333333333333333, 0.36470588235294116,0.36470588235294116),
float3(0.9372549019607843, 0.3686274509803922,0.36470588235294116),
float3(0.9411764705882353, 0.3764705882352941,0.36470588235294116),
float3(0.9450980392156862, 0.3803921568627451,0.3607843137254902),
float3(0.9490196078431372, 0.38823529411764707,0.3607843137254902),
float3(0.9529411764705882, 0.396078431372549,0.3607843137254902),
float3(0.9529411764705882, 0.403921568627451,0.3568627450980392),
float3(0.9568627450980393, 0.40784313725490196,0.3568627450980392),
float3(0.9607843137254902, 0.41568627450980394,0.3568627450980392),
float3(0.9607843137254902, 0.4235294117647059,0.3568627450980392),
float3(0.9647058823529412, 0.43137254901960786,0.3568627450980392),
float3(0.9647058823529412, 0.4392156862745098,0.3568627450980392),
float3(0.9686274509803922, 0.44313725490196076,0.3568627450980392),
float3(0.9686274509803922, 0.45098039215686275,0.3607843137254902),
float3(0.9725490196078431, 0.4588235294117647,0.3607843137254902),
float3(0.9725490196078431, 0.4666666666666667,0.3607843137254902),
float3(0.9764705882352941, 0.4745098039215686,0.3607843137254902),
float3(0.9764705882352941, 0.4823529411764706,0.36470588235294116),
float3(0.9764705882352941, 0.49019607843137253,0.36470588235294116),
float3(0.9803921568627451, 0.4980392156862745,0.3686274509803922),
float3(0.9803921568627451, 0.5019607843137255,0.3686274509803922),
float3(0.9803921568627451, 0.5098039215686274,0.37254901960784315),
float3(0.984313725490196, 0.5176470588235295,0.3764705882352941),
float3(0.984313725490196, 0.5254901960784314,0.3764705882352941),
float3(0.984313725490196, 0.5333333333333333,0.3803921568627451),
float3(0.984313725490196, 0.5411764705882353,0.3843137254901961),
float3(0.9882352941176471, 0.5490196078431373,0.38823529411764707),
float3(0.9882352941176471, 0.5568627450980392,0.38823529411764707),
float3(0.9882352941176471, 0.5647058823529412,0.39215686274509803),
float3(0.9882352941176471, 0.5725490196078431,0.396078431372549),
float3(0.9882352941176471, 0.5764705882352941,0.4),
float3(0.9921568627450981, 0.5843137254901961,0.403921568627451),
float3(0.9921568627450981, 0.592156862745098,0.40784313725490196),
float3(0.9921568627450981, 0.6,0.4117647058823529),
float3(0.9921568627450981, 0.6078431372549019,0.41568627450980394),
float3(0.9921568627450981, 0.615686274509804,0.4196078431372549),
float3(0.9921568627450981, 0.6235294117647059,0.4235294117647059),
float3(0.9921568627450981, 0.6313725490196078,0.43137254901960786),
float3(0.9921568627450981, 0.6352941176470588,0.43529411764705883),
float3(0.9921568627450981, 0.6431372549019608,0.4392156862745098),
float3(0.996078431372549, 0.6509803921568628,0.44313725490196076),
float3(0.996078431372549, 0.6588235294117647,0.45098039215686275),
float3(0.996078431372549, 0.6666666666666666,0.4549019607843137),
float3(0.996078431372549, 0.6745098039215687,0.4588235294117647),
float3(0.996078431372549, 0.6823529411764706,0.4627450980392157),
float3(0.996078431372549, 0.6862745098039216,0.47058823529411764),
float3(0.996078431372549, 0.6941176470588235,0.4745098039215686),
float3(0.996078431372549, 0.7019607843137254,0.4823529411764706),
float3(0.996078431372549, 0.7098039215686275,0.48627450980392156),
float3(0.996078431372549, 0.7176470588235294,0.49019607843137253),
float3(0.996078431372549, 0.7254901960784313,0.4980392156862745),
float3(0.996078431372549, 0.7333333333333333,0.5019607843137255),
float3(0.996078431372549, 0.7372549019607844,0.5098039215686274),
float3(0.996078431372549, 0.7450980392156863,0.5137254901960784),
float3(0.996078431372549, 0.7529411764705882,0.5215686274509804),
float3(0.996078431372549, 0.7607843137254902,0.5254901960784314),
float3(0.996078431372549, 0.7686274509803922,0.5333333333333333),
float3(0.996078431372549, 0.7764705882352941,0.5372549019607843),
float3(0.996078431372549, 0.7803921568627451,0.5450980392156862),
float3(0.996078431372549, 0.788235294117647,0.5529411764705883),
float3(0.996078431372549, 0.796078431372549,0.5568627450980392),
float3(0.9921568627450981, 0.803921568627451,0.5647058823529412),
float3(0.9921568627450981, 0.8117647058823529,0.5725490196078431),
float3(0.9921568627450981, 0.8196078431372549,0.5764705882352941),
float3(0.9921568627450981, 0.8235294117647058,0.5843137254901961),
float3(0.9921568627450981, 0.8313725490196079,0.592156862745098),
float3(0.9921568627450981, 0.8392156862745098,0.596078431372549),
float3(0.9921568627450981, 0.8470588235294118,0.6039215686274509),
float3(0.9921568627450981, 0.8549019607843137,0.611764705882353),
float3(0.9921568627450981, 0.8627450980392157,0.615686274509804),
float3(0.9921568627450981, 0.8666666666666667,0.6235294117647059),
float3(0.9921568627450981, 0.8745098039215686,0.6313725490196078),
float3(0.9921568627450981, 0.8823529411764706,0.6392156862745098),
float3(0.9882352941176471, 0.8901960784313725,0.6470588235294118),
float3(0.9882352941176471, 0.8980392156862745,0.6509803921568628),
float3(0.9882352941176471, 0.9019607843137255,0.6588235294117647),
float3(0.9882352941176471, 0.9098039215686274,0.6666666666666666),
float3(0.9882352941176471, 0.9176470588235294,0.6745098039215687),
float3(0.9882352941176471, 0.9254901960784314,0.6823529411764706),
float3(0.9882352941176471, 0.9333333333333333,0.6901960784313725),
float3(0.9882352941176471, 0.9411764705882353,0.6941176470588235),
float3(0.9882352941176471, 0.9450980392156862,0.7019607843137254),
float3(0.9882352941176471, 0.9529411764705882,0.7098039215686275),
float3(0.9882352941176471, 0.9607843137254902,0.7176470588235294),
float3(0.984313725490196, 0.9686274509803922,0.7254901960784313),
float3(0.984313725490196, 0.9764705882352941,0.7333333333333333),
float3(0.984313725490196, 0.9803921568627451,0.7411764705882353),
float3(0.984313725490196, 0.9882352941176471,0.7490196078431373)};

				return heatmap[val];
			}

			float3 HeatMapColorNMDP(float val, float min, float max)
			{
				/*
				if (val > max)
					return float3(1.0, 1.0, 1.0);
				else if(-val > min)
					return float3(0.0, 1.0, 0.0);
					*/	
					/*
				if (val > 0)
				{
					if(val < max/3.0)
					{
						float v = ((1.0)*val - max/3.0) / (max/3.0 - 0.0);
						return float3(v, 0.0, 0.0);
					}
					else if(val < max*2.0/3.0)
					{
						float v = ((1.0)*(val) - max*2.0/3.0) / ((1.0)*max*2.0/3.0 -max/3.0);
						return float3(1.0, v, 0.0);
					}
					else
					{
						float v = ((1.0)*(val) - max) / ((1.0)*max -max*2.0/3.0);
						return float3(1.0, 1.0, v);
					}
					
				}
				else
				{
				//return float3(0.0, 0.0, 0.0);
					if(-val < min/2.0)
					{
						float v = (-(1.0)*val - min/2.0) / (min/2.0 - 0.0);
						return float3(0.0, 1.0-v, 1.0);
					}
					else
					{
						float v = (-(1.0)*(val) - min) / ((1.0)*min -min/2.0);
						return float3(0.0, 0, 1.0-v);
					}
				}
				*/


				float3 _colocNMDP[256] = {float3(  5,   0,   0),
					float3(  10,   0,  0),
					float3(  15,   0,  0),
					float3(  20,   0,  0),
					float3(  26,   0,  0),
					float3(  31,   0,  0),
					float3(  36,   0,  0),
					float3(  41,   0,  0),
					float3(  46,   0,  0),
					float3(  51,   1,  1),
					float3(  57,   1,  1),
					float3(  62,   1,  1),
					float3(  67,   1,  1),
					float3(  72,   1,  1),
					float3(  77,   1,  1),
					float3(  82,   1,  1),
					float3(  87,   1,  1),
					float3(  93,   1,  1),
					float3(  98,   1,  1),
					float3( 103,   2,  2),
					float3( 108,   2,  2),
					float3( 113,   2,  2),
					float3( 118,   2,  2),
					float3( 123,   2,  2),
					float3( 129,   2,  2),
					float3( 134,   2,  2),
					float3( 139,   2,  2),
					float3( 144,   2,  2),
					float3( 149,   2,  2),
					float3( 154,   3,  2),
					float3( 157,   3,  2),
					float3( 161,   4,  2),
					float3( 164,   4,  2),
					float3( 168,   5,  2),
					float3( 171,   6,  2),
					float3( 175,   6,  2),
					float3( 178,   7,  2),
					float3( 181,   7,  2),
					float3( 185,   8,  2),
					float3( 188,   9,  2),
					float3( 192,   9,  2),
					float3( 195,  10,  2),
					float3( 199,  11,  2),
					float3( 202,  11,  2),
					float3( 205,  12,  1),
					float3( 209,  12,  1),
					float3( 212,  13,  1),
					float3( 217,  14,  1),
					float3( 217,  14,  1),
					float3( 223,  15,  1),
					float3( 226,  15,  1),
					float3( 230,  16,  1),
					float3( 233,  17,  1),
					float3( 236,  17,  1),
					float3( 241,  18,  1),
					float3( 241,  18,  1),
					float3( 247,  19,  1),
					float3( 250,  20,  1),
					float3( 254,  20,  1),
					float3( 254,  22,  0),
					float3( 254,  24,  0),
					float3( 254,  26,  0),
					float3( 254,  28,  0),
					float3( 254,  30,  0),
					float3( 254,  33,  0),
					float3( 254,  35,  0),
					float3( 254,  37,  0),
					float3( 254,  39,  0),
					float3( 254,  41,  0),
					float3( 254,  43,  0),
					float3( 254,  45,  0),
					float3( 254,  47,  0),
					float3( 254,  49,  0),
					float3( 254,  51,  0),
					float3( 254,  53,  0),
					float3( 254,  55,  0),
					float3( 254,  57,  0),
					float3( 254,  60,  0),
					float3( 254,  62,  0),
					float3( 254,  64,  0),
					float3( 254,  66,  0),
					float3( 254,  68,  0),
					float3( 254,  70,  0),
					float3( 254,  72,  0),
					float3( 254,  74,  0),
					float3( 254,  76,  0),
					float3( 254,  78,  0),
					float3( 254,  80,  0),
					float3( 254,  82,  0),
					float3( 254,  84,  0),
					float3( 254,  86,  0),
					float3( 254,  88,  0),
					float3( 254,  88,  0),
					float3( 254,  91,  0),
					float3( 254,  93,  0),
					float3( 254,  95,  0),
					float3( 254,  96,  0),
					float3( 254,  98,  0),
					float3( 254, 100,  0),
					float3( 254, 102,  0),
					float3( 254, 102,  0),
					float3( 254, 105,  0),
					float3( 254, 107,  0),
					float3( 254, 108,  0),
					float3( 254, 110,  0),
					float3( 254, 112,  0),
					float3( 254, 114,  0),
					float3( 254, 116,  0),
					float3( 254, 116,  0),
					float3( 254, 119,  0),
					float3( 254, 121,  0),
					float3( 254, 123,  0),
					float3( 254, 124,  0),
					float3( 254, 126,  0),
					float3( 254, 128,  0),
					float3( 254, 128,  0),
					float3( 254, 131,  0),
					float3( 254, 133,  0),
					float3( 254, 135,  0),
					float3( 254, 137,  0),
					float3( 254, 138,  0),
					float3( 254, 140,  0),
					float3( 254, 142,  0),
					float3( 254, 142,  0),
					float3( 254, 145,  0),
					float3( 254, 147,  0),
					float3( 254, 149,  0),
					float3( 255, 151,  0),
					float3( 255, 152,  0),
					float3( 255, 154,  0),
					float3( 255, 156,  0),
					float3( 255, 158,  0),
					float3( 255, 160,  0),
					float3( 255, 162,  1),
					float3( 255, 164,  1),
					float3( 255, 166,  1),
					float3( 255, 168,  1),
					float3( 255, 170,  1),
					float3( 255, 172,  2),
					float3( 255, 174,  2),
					float3( 255, 176,  2),
					float3( 255, 178,  2),
					float3( 255, 178,  2),
					float3( 255, 181,  2),
					float3( 255, 183,  3),
					float3( 255, 185,  3),
					float3( 255, 187,  3),
					float3( 255, 189,  3),
					float3( 255, 191,  3),
					float3( 255, 193,  4),
					float3( 255, 195,  4),
					float3( 255, 197,  4),
					float3( 255, 199,  4),
					float3( 255, 201,  4),
					float3( 255, 203,  5),
					float3( 255, 204,  5),
					float3( 255, 206,  5),
					float3( 255, 208,  5),
					float3( 255, 210,  5),
					float3( 255, 212,  5),
					float3( 255, 214,  6),
					float3( 255, 216,  6),
					float3( 255, 218,  6),
					float3( 255, 220,  6),
					float3( 255, 222,  6),
					float3( 255, 224,  7),
					float3( 255, 226,  7),
					float3( 255, 228,  7),
					float3( 255, 230,  7),
					float3( 255, 232,  7),
					float3( 255, 232,  7),
					float3( 255, 235,  8),
					float3( 255, 237,  8),
					float3( 255, 239,  8),
					float3( 255, 241,  8),
					float3( 255, 243,  8),
					float3( 255, 245,  9),
					float3( 255, 247,  9),
					float3( 255, 249,  9),
					float3( 255, 251,  9),
					float3( 255, 253,  9),
					float3( 254, 254, 10),
					float3( 254, 254, 13),
					float3( 254, 254, 16),
					float3( 254, 254, 18),
					float3( 254, 254, 21),
					float3( 254, 254, 25),
					float3( 254, 254, 27),
					float3( 254, 254, 30),
					float3( 254, 254, 33),
					float3( 254, 254, 36),
					float3( 254, 254, 39),
					float3( 254, 254, 42),
					float3( 254, 254, 44),
					float3( 254, 254, 48),
					float3( 254, 254, 50),
					float3( 254, 254, 53),
					float3( 254, 254, 56),
					float3( 254, 254, 59),
					float3( 254, 254, 62),
					float3( 254, 254, 65),
					float3( 254, 254, 68),
					float3( 254, 254, 71),
					float3( 254, 254, 74),
					float3( 254, 253, 76),
					float3( 254, 253, 79),
					float3( 254, 253, 82),
					float3( 254, 253, 85),
					float3( 254, 253, 88),
					float3( 254, 253, 91),
					float3( 254, 253, 94),
					float3( 254, 253, 97),
					float3( 254, 253,100),
					float3( 254, 253,103),
					float3( 254, 253,105),
					float3( 254, 253,109),
					float3( 254, 253,111),
					float3( 254, 253,114),
					float3( 254, 253,117),
					float3( 254, 253,120),
					float3( 254, 253,123),
					float3( 254, 253,126),
					float3( 254, 253,129),
					float3( 254, 253,132),
					float3( 254, 253,135),
					float3( 254, 253,137),
					float3( 254, 253,140),
					float3( 253, 252,144),
					float3( 253, 252,147),
					float3( 253, 252,151),
					float3( 253, 252,155),
					float3( 253, 252,159),
					float3( 253, 252,163),
					float3( 253, 252,166),
					float3( 253, 252,170),
					float3( 253, 252,174),
					float3( 253, 252,178),
					float3( 253, 252,182),
					float3( 253, 252,185),
					float3( 253, 252,189),
					float3( 253, 252,193),
					float3( 253, 252,197),
					float3( 253, 252,201),
					float3( 253, 252,204),
					float3( 253, 252,208),
					float3( 253, 252,212),
					float3( 253, 252,216),
					float3( 253, 252,220),
					float3( 253, 252,224),
					float3( 253, 252,227),
					float3( 253, 252,231),
					float3( 253, 252,235),
					float3( 253, 252,239),
					float3( 253, 252,243),
					float3( 253, 252,246),
					float3( 249, 253,251)};

				float3 _notColocNMDP[256] = {float3(126, 254,255),
float3(126, 253,255),
float3(125, 252,255),
float3(125, 251,255),
float3(124, 250,255),
float3(124, 249,255),
float3(123, 248,255),
float3(123, 247,255),
float3(122, 246,255),
float3(122, 246,255),
float3(121, 244,255),
float3(121, 244,255),
float3(120, 243,255),
float3(120, 241,255),
float3(119, 241,255),
float3(119, 240,255),
float3(118, 238,255),
float3(118, 238,255),
float3(117, 237,255),
float3(116, 236,255),
float3(116, 235,255),
float3(116, 234,255),
float3(115, 233,255),
float3(114, 232,255),
float3(114, 231,255),
float3(113, 230,255),
float3(113, 229,255),
float3(112, 228,255),
float3(112, 227,255),
float3(111, 226,255),
float3(111, 225,255),
float3(110, 224,255),
float3(110, 223,255),
float3(109, 222,255),
float3(109, 221,255),
float3(108, 220,255),
float3(108, 219,255),
float3(107, 218,255),
float3(107, 217,255),
float3(106, 216,255),
float3(106, 215,255),
float3(105, 214,255),
float3(105, 213,255),
float3(104, 212,255),
float3(104, 211,255),
float3(103, 210,255),
float3(103, 210,255),
float3(102, 208,255),
float3(102, 208,255),
float3(101, 207,255),
float3(100, 205,255),
float3(100, 205,255),
float3(99, 204,255),
float3(99, 202,255),
float3(98, 202,255),
float3(98, 201,255),
float3(97, 200,255),
float3(97, 199,255),
float3(96, 198,255),
float3(96, 197,255),
float3(95, 196,255),
float3(95, 195,255),
float3(94, 194,255),
float3(94, 193,255),
float3(93, 192,255),
float3(93, 191,255),
float3(92, 190,255),
float3(92, 189,255),
float3(91, 188,255),
float3(91, 188,255),
float3(90, 187,255),
float3(90, 186,255),
float3(89, 185,255),
float3(89, 184,255),
float3(89, 183,255),
float3(88, 182,255),
float3(88, 181,255),
float3(87, 180,255),
float3(87, 180,255),
float3(86, 179,255),
float3(86, 178,255),
float3(85, 177,255),
float3(85, 176,255),
float3(85, 175,255),
float3(84, 174,255),
float3(84, 174,255),
float3(83, 173,255),
float3(83, 172,255),
float3(82, 171,255),
float3(82, 170,255),
float3(81, 169,255),
float3(81, 168,255),
float3(80, 168,255),
float3(80, 166,255),
float3(79, 166,255),
float3(79, 165,255),
float3(78, 164,255),
float3(78, 163,255),
float3(78, 162,255),
float3(77, 161,255),
float3(77, 160,255),
float3(76, 160,255),
float3(76, 158,255),
float3(75, 158,255),
float3(75, 157,255),
float3(74, 156,255),
float3(74, 155,255),
float3(73, 154,255),
float3(73, 153,255),
float3(72, 152,255),
float3(72, 152,255),
float3(71, 151,255),
float3(71, 150,255),
float3(71, 149,255),
float3(70, 148,255),
float3(70, 147,255),
float3(69, 146,255),
float3(69, 146,255),
float3(68, 145,255),
float3(68, 144,255),
float3(67, 143,255),
float3(67, 142,255),
float3(67, 141,255),
float3(66, 140,255),
float3(66, 139,255),
float3(65, 139,255),
float3(65, 138,255),
float3(64, 137,255),
float3(64, 136,255),
float3(63, 135,255),
float3(63, 134,255),
float3(62, 133,255),
float3(62, 132,255),
float3(62, 131,255),
float3(61, 130,255),
float3(61, 129,255),
float3(60, 128,255),
float3(60, 127,255),
float3(59, 126,255),
float3(59, 125,255),
float3(58, 124,255),
float3(58, 122,255),
float3(58, 121,255),
float3(57, 120,255),
float3(57, 119,255),
float3(56, 118,255),
float3(56, 117,255),
float3(55, 116,255),
float3(55, 115,255),
float3(55, 114,255),
float3(54, 113,255),
float3(54, 112,255),
float3(53, 111,255),
float3(53, 110,255),
float3(52, 109,255),
float3(52, 108,255),
float3(52, 107,255),
float3(51, 106,255),
float3(51, 105,255),
float3(50, 104,255),
float3(50, 102,255),
float3(49, 101,255),
float3(49, 100,255),
float3(48, 99,255),
float3(48, 98,255),
float3(47, 97,255),
float3(47, 96,255),
float3(47, 95,255),
float3(46, 94,255),
float3(46, 93,255),
float3(45, 91,255),
float3(45, 90,255),
float3(44, 89,255),
float3(44, 88,255),
float3(44, 87,255),
float3(43, 86,255),
float3(43, 85,255),
float3(42, 84,255),
float3(42, 83,255),
float3(41, 82,255),
float3(41, 81,255),
float3(41, 80,255),
float3(40, 79,255),
float3(40, 78,255),
float3(39, 77,255),
float3(39, 76,255),
float3(38, 75,255),
float3(38, 74,255),
float3(37, 73,255),
float3(37, 71,255),
float3(37, 70,255),
float3(36, 69,255),
float3(36, 68,255),
float3(35, 67,255),
float3(35, 66,255),
float3(34, 65,255),
float3(34, 64,255),
float3(33, 63,255),
float3(33, 62,255),
float3(33, 60,255),
float3(32, 59,255),
float3(32, 58,255),
float3(31, 57,255),
float3(31, 56,255),
float3(30, 55,255),
float3(30, 54,255),
float3(30, 53,255),
float3(29, 52,255),
float3(29, 51,255),
float3(28, 50,255),
float3(28, 49,255),
float3(27, 48,255),
float3(27, 47,255),
float3(26, 46,255),
float3(26, 45,255),
float3(26, 44,255),
float3(25, 43,255),
float3(25, 42,255),
float3(24, 40,255),
float3(24, 39,255),
float3(23, 38,255),
float3(23, 37,255),
float3(23, 36,255),
float3(22, 35,255),
float3(22, 34,255),
float3(21, 33,255),
float3(21, 32,255),
float3(20, 31,255),
float3(20, 30,255),
float3(20, 29,255),
float3(19, 28,255),
float3(19, 27,255),
float3(18, 26,255),
float3(18, 25,255),
float3(17, 23,255),
float3(17, 22,255),
float3(16, 21,255),
float3(16, 20,255),
float3(15, 19,255),
float3(15, 18,255),
float3(15, 17,255),
float3(14, 16,255),
float3(14, 15,255),
float3(13, 14,255),
float3(13, 13,255),
float3(12, 12,255),
float3(12, 11,255),
float3(12, 9,255),
float3(11, 8,255),
float3(11, 7,255),
float3(10, 6,255),
float3(10, 5,255),
float3(9, 4,255),
float3(9, 3,255),
float3(9, 2,255),
float3(8, 1,255)};



				

				if(val >= 0)
				{
					//if (val > max)
						//return _colocNMDP[255];

					int mappedVal = (int)(val/max*255);
					if(mappedVal > 255)
						mappedVal = 255;
					
					return _colocNMDP[mappedVal]/255.0;
				}
				else
				{
					//if(-val > min)
						//return _notColocNMDP[255];

					int mappedVal = (int)(-val/min*255);
					if(mappedVal > 255)
						mappedVal = 255;
					return _notColocNMDP[mappedVal]/255.0;
				}


				
				return float3(0.0, 0.0, 0.0);
			}

			float3 HeatMapColorRainbowSolidBreak(float val, float min, float max)
			{
				//float v = (float)(val - min) / (float)(max-min);
				float diff = max - min;
				float diffFraction = diff / 7.0;
				float positions[8] = { min, diffFraction + min, diffFraction * 2 + min, diffFraction * 3 + min, diffFraction * 4 + min, diffFraction * 5 + min, diffFraction * 6 + min, diffFraction * 7 + min }; //  the positions at which colors change

																																														  // first interval (blue increases)
				if (val > positions[0] && val < positions[1])
				{
					return float3(0.0, 0.0, 1.0);
				}

				// second interval (blue constant, green grows)
				if (val > positions[1] && val < positions[2])
				{
					return float3(0.0, 1.0, 1.0);
				}

				// third interval (blue decrease, green constant)
				if (val > positions[2] && val < positions[3])
				{
					return float3(0.0, 1.0, 0.0);
				}

				// fourth interval (red increases, green constant)
				if (val > positions[3] && val < positions[4])
				{
					return float3(1.0, 1.0, 0.0);
				}

				// fifth interval (red constnat, green decrease)
				if (val > positions[4] && val < positions[5])
				{
					return float3(1.0, 0.0, 0.0);
				}

				// sixth interval (red constant, blue increases)
				if (val > positions[5] && val < positions[6])
				{
					return float3(1.0, 0.0, 1.0);
				}

				// seventh interval (red constant, blue constant, green increases to white)
				if (val > positions[6] && val < positions[7])
				{
					return float3(1.0, 1.0, 1.0);
				}

				if (val > max)
					return float3(1.0, 1.0, 1.0);

				return float3(0.0, 0.0, 0.0);
			}

			float3 HeatMapViridis(float value, float min, float max)
			{
				float3 _viridisCM[256] = { float3(0.26700401,  0.00487433,  0.32941519),
					float3(0.26851048,  0.00960483,  0.33542652),
					float3(0.26994384,  0.01462494,  0.34137895),
					float3(0.27130489,  0.01994186,  0.34726862),
					float3(0.27259384,  0.02556309,  0.35309303),
					float3(0.27380934,  0.03149748,  0.35885256),
					float3(0.27495242,  0.03775181,  0.36454323),
					float3(0.27602238,  0.04416723,  0.37016418),
					float3(0.2770184 ,  0.05034437,  0.37571452),
					float3(0.27794143,  0.05632444,  0.38119074),
					float3(0.27879067,  0.06214536,  0.38659204),
					float3(0.2795655 ,  0.06783587,  0.39191723),
					float3(0.28026658,  0.07341724,  0.39716349),
					float3(0.28089358,  0.07890703,  0.40232944),
					float3(0.28144581,  0.0843197 ,  0.40741404),
					float3(0.28192358,  0.08966622,  0.41241521),
					float3(0.28232739,  0.09495545,  0.41733086),
					float3(0.28265633,  0.10019576,  0.42216032),
					float3(0.28291049,  0.10539345,  0.42690202),
					float3(0.28309095,  0.11055307,  0.43155375),
					float3(0.28319704,  0.11567966,  0.43611482),
					float3(0.28322882,  0.12077701,  0.44058404),
					float3(0.28318684,  0.12584799,  0.44496),
					float3(0.283072  ,  0.13089477,  0.44924127),
					float3(0.28288389,  0.13592005,  0.45342734),
					float3(0.28262297,  0.14092556,  0.45751726),
					float3(0.28229037,  0.14591233,  0.46150995),
					float3(0.28188676,  0.15088147,  0.46540474),
					float3(0.28141228,  0.15583425,  0.46920128),
					float3(0.28086773,  0.16077132,  0.47289909),
					float3(0.28025468,  0.16569272,  0.47649762),
					float3(0.27957399,  0.17059884,  0.47999675),
					float3(0.27882618,  0.1754902 ,  0.48339654),
					float3(0.27801236,  0.18036684,  0.48669702),
					float3(0.27713437,  0.18522836,  0.48989831),
					float3(0.27619376,  0.19007447,  0.49300074),
					float3(0.27519116,  0.1949054 ,  0.49600488),
					float3(0.27412802,  0.19972086,  0.49891131),
					float3(0.27300596,  0.20452049,  0.50172076),
					float3(0.27182812,  0.20930306,  0.50443413),
					float3(0.27059473,  0.21406899,  0.50705243),
					float3(0.26930756,  0.21881782,  0.50957678),
					float3(0.26796846,  0.22354911,  0.5120084),
					float3(0.26657984,  0.2282621 ,  0.5143487),
					float3(0.2651445 ,  0.23295593,  0.5165993),
					float3(0.2636632 ,  0.23763078,  0.51876163),
					float3(0.26213801,  0.24228619,  0.52083736),
					float3(0.26057103,  0.2469217 ,  0.52282822),
					float3(0.25896451,  0.25153685,  0.52473609),
					float3(0.25732244,  0.2561304 ,  0.52656332),
					float3(0.25564519,  0.26070284,  0.52831152),
					float3(0.25393498,  0.26525384,  0.52998273),
					float3(0.25219404,  0.26978306,  0.53157905),
					float3(0.25042462,  0.27429024,  0.53310261),
					float3(0.24862899,  0.27877509,  0.53455561),
					float3(0.2468114 ,  0.28323662,  0.53594093),
					float3(0.24497208,  0.28767547,  0.53726018),
					float3(0.24311324,  0.29209154,  0.53851561),
					float3(0.24123708,  0.29648471,  0.53970946),
					float3(0.23934575,  0.30085494,  0.54084398),
					float3(0.23744138,  0.30520222,  0.5419214),
					float3(0.23552606,  0.30952657,  0.54294396),
					float3(0.23360277,  0.31382773,  0.54391424),
					float3(0.2316735 ,  0.3181058 ,  0.54483444),
					float3(0.22973926,  0.32236127,  0.54570633),
					float3(0.22780192,  0.32659432,  0.546532),
					float3(0.2258633 ,  0.33080515,  0.54731353),
					float3(0.22392515,  0.334994  ,  0.54805291),
					float3(0.22198915,  0.33916114,  0.54875211),
					float3(0.22005691,  0.34330688,  0.54941304),
					float3(0.21812995,  0.34743154,  0.55003755),
					float3(0.21620971,  0.35153548,  0.55062743),
					float3(0.21429757,  0.35561907,  0.5511844),
					float3(0.21239477,  0.35968273,  0.55171011),
					float3(0.2105031 ,  0.36372671,  0.55220646),
					float3(0.20862342,  0.36775151,  0.55267486),
					float3(0.20675628,  0.37175775,  0.55311653),
					float3(0.20490257,  0.37574589,  0.55353282),
					float3(0.20306309,  0.37971644,  0.55392505),
					float3(0.20123854,  0.38366989,  0.55429441),
					float3(0.1994295 ,  0.38760678,  0.55464205),
					float3(0.1976365 ,  0.39152762,  0.55496905),
					float3(0.19585993,  0.39543297,  0.55527637),
					float3(0.19410009,  0.39932336,  0.55556494),
					float3(0.19235719,  0.40319934,  0.55583559),
					float3(0.19063135,  0.40706148,  0.55608907),
					float3(0.18892259,  0.41091033,  0.55632606),
					float3(0.18723083,  0.41474645,  0.55654717),
					float3(0.18555593,  0.4185704 ,  0.55675292),
					float3(0.18389763,  0.42238275,  0.55694377),
					float3(0.18225561,  0.42618405,  0.5571201),
					float3(0.18062949,  0.42997486,  0.55728221),
					float3(0.17901879,  0.43375572,  0.55743035),
					float3(0.17742298,  0.4375272 ,  0.55756466),
					float3(0.17584148,  0.44128981,  0.55768526),
					float3(0.17427363,  0.4450441 ,  0.55779216),
					float3(0.17271876,  0.4487906 ,  0.55788532),
					float3(0.17117615,  0.4525298 ,  0.55796464),
					float3(0.16964573,  0.45626209,  0.55803034),
					float3(0.16812641,  0.45998802,  0.55808199),
					float3(0.1666171 ,  0.46370813,  0.55811913),
					float3(0.16511703,  0.4674229 ,  0.55814141),
					float3(0.16362543,  0.47113278,  0.55814842),
					float3(0.16214155,  0.47483821,  0.55813967),
					float3(0.16066467,  0.47853961,  0.55811466),
					float3(0.15919413,  0.4822374 ,  0.5580728),
					float3(0.15772933,  0.48593197,  0.55801347),
					float3(0.15626973,  0.4896237 ,  0.557936),
					float3(0.15481488,  0.49331293,  0.55783967),
					float3(0.15336445,  0.49700003,  0.55772371),
					float3(0.1519182 ,  0.50068529,  0.55758733),
					float3(0.15047605,  0.50436904,  0.55742968),
					float3(0.14903918,  0.50805136,  0.5572505),
					float3(0.14760731,  0.51173263,  0.55704861),
					float3(0.14618026,  0.51541316,  0.55682271),
					float3(0.14475863,  0.51909319,  0.55657181),
					float3(0.14334327,  0.52277292,  0.55629491),
					float3(0.14193527,  0.52645254,  0.55599097),
					float3(0.14053599,  0.53013219,  0.55565893),
					float3(0.13914708,  0.53381201,  0.55529773),
					float3(0.13777048,  0.53749213,  0.55490625),
					float3(0.1364085 ,  0.54117264,  0.55448339),
					float3(0.13506561,  0.54485335,  0.55402906),
					float3(0.13374299,  0.54853458,  0.55354108),
					float3(0.13244401,  0.55221637,  0.55301828),
					float3(0.13117249,  0.55589872,  0.55245948),
					float3(0.1299327 ,  0.55958162,  0.55186354),
					float3(0.12872938,  0.56326503,  0.55122927),
					float3(0.12756771,  0.56694891,  0.55055551),
					float3(0.12645338,  0.57063316,  0.5498411),
					float3(0.12539383,  0.57431754,  0.54908564),
					float3(0.12439474,  0.57800205,  0.5482874),
					float3(0.12346281,  0.58168661,  0.54744498),
					float3(0.12260562,  0.58537105,  0.54655722),
					float3(0.12183122,  0.58905521,  0.54562298),
					float3(0.12114807,  0.59273889,  0.54464114),
					float3(0.12056501,  0.59642187,  0.54361058),
					float3(0.12009154,  0.60010387,  0.54253043),
					float3(0.11973756,  0.60378459,  0.54139999),
					float3(0.11951163,  0.60746388,  0.54021751),
					float3(0.11942341,  0.61114146,  0.53898192),
					float3(0.11948255,  0.61481702,  0.53769219),
					float3(0.11969858,  0.61849025,  0.53634733),
					float3(0.12008079,  0.62216081,  0.53494633),
					float3(0.12063824,  0.62582833,  0.53348834),
					float3(0.12137972,  0.62949242,  0.53197275),
					float3(0.12231244,  0.63315277,  0.53039808),
					float3(0.12344358,  0.63680899,  0.52876343),
					float3(0.12477953,  0.64046069,  0.52706792),
					float3(0.12632581,  0.64410744,  0.52531069),
					float3(0.12808703,  0.64774881,  0.52349092),
					float3(0.13006688,  0.65138436,  0.52160791),
					float3(0.13226797,  0.65501363,  0.51966086),
					float3(0.13469183,  0.65863619,  0.5176488),
					float3(0.13733921,  0.66225157,  0.51557101),
					float3(0.14020991,  0.66585927,  0.5134268),
					float3(0.14330291,  0.66945881,  0.51121549),
					float3(0.1466164 ,  0.67304968,  0.50893644),
					float3(0.15014782,  0.67663139,  0.5065889),
					float3(0.15389405,  0.68020343,  0.50417217),
					float3(0.15785146,  0.68376525,  0.50168574),
					float3(0.16201598,  0.68731632,  0.49912906),
					float3(0.1663832 ,  0.69085611,  0.49650163),
					float3(0.1709484 ,  0.69438405,  0.49380294),
					float3(0.17570671,  0.6978996 ,  0.49103252),
					float3(0.18065314,  0.70140222,  0.48818938),
					float3(0.18578266,  0.70489133,  0.48527326),
					float3(0.19109018,  0.70836635,  0.48228395),
					float3(0.19657063,  0.71182668,  0.47922108),
					float3(0.20221902,  0.71527175,  0.47608431),
					float3(0.20803045,  0.71870095,  0.4728733),
					float3(0.21400015,  0.72211371,  0.46958774),
					float3(0.22012381,  0.72550945,  0.46622638),
					float3(0.2263969 ,  0.72888753,  0.46278934),
					float3(0.23281498,  0.73224735,  0.45927675),
					float3(0.2393739 ,  0.73558828,  0.45568838),
					float3(0.24606968,  0.73890972,  0.45202405),
					float3(0.25289851,  0.74221104,  0.44828355),
					float3(0.25985676,  0.74549162,  0.44446673),
					float3(0.26694127,  0.74875084,  0.44057284),
					float3(0.27414922,  0.75198807,  0.4366009),
					float3(0.28147681,  0.75520266,  0.43255207),
					float3(0.28892102,  0.75839399,  0.42842626),
					float3(0.29647899,  0.76156142,  0.42422341),
					float3(0.30414796,  0.76470433,  0.41994346),
					float3(0.31192534,  0.76782207,  0.41558638),
					float3(0.3198086 ,  0.77091403,  0.41115215),
					float3(0.3277958 ,  0.77397953,  0.40664011),
					float3(0.33588539,  0.7770179 ,  0.40204917),
					float3(0.34407411,  0.78002855,  0.39738103),
					float3(0.35235985,  0.78301086,  0.39263579),
					float3(0.36074053,  0.78596419,  0.38781353),
					float3(0.3692142 ,  0.78888793,  0.38291438),
					float3(0.37777892,  0.79178146,  0.3779385),
					float3(0.38643282,  0.79464415,  0.37288606),
					float3(0.39517408,  0.79747541,  0.36775726),
					float3(0.40400101,  0.80027461,  0.36255223),
					float3(0.4129135 ,  0.80304099,  0.35726893),
					float3(0.42190813,  0.80577412,  0.35191009),
					float3(0.43098317,  0.80847343,  0.34647607),
					float3(0.44013691,  0.81113836,  0.3409673),
					float3(0.44936763,  0.81376835,  0.33538426),
					float3(0.45867362,  0.81636288,  0.32972749),
					float3(0.46805314,  0.81892143,  0.32399761),
					float3(0.47750446,  0.82144351,  0.31819529),
					float3(0.4870258 ,  0.82392862,  0.31232133),
					float3(0.49661536,  0.82637633,  0.30637661),
					float3(0.5062713 ,  0.82878621,  0.30036211),
					float3(0.51599182,  0.83115784,  0.29427888),
					float3(0.52577622,  0.83349064,  0.2881265),
					float3(0.5356211 ,  0.83578452,  0.28190832),
					float3(0.5455244 ,  0.83803918,  0.27562602),
					float3(0.55548397,  0.84025437,  0.26928147),
					float3(0.5654976 ,  0.8424299 ,  0.26287683),
					float3(0.57556297,  0.84456561,  0.25641457),
					float3(0.58567772,  0.84666139,  0.24989748),
					float3(0.59583934,  0.84871722,  0.24332878),
					float3(0.60604528,  0.8507331 ,  0.23671214),
					float3(0.61629283,  0.85270912,  0.23005179),
					float3(0.62657923,  0.85464543,  0.22335258),
					float3(0.63690157,  0.85654226,  0.21662012),
					float3(0.64725685,  0.85839991,  0.20986086),
					float3(0.65764197,  0.86021878,  0.20308229),
					float3(0.66805369,  0.86199932,  0.19629307),
					float3(0.67848868,  0.86374211,  0.18950326),
					float3(0.68894351,  0.86544779,  0.18272455),
					float3(0.69941463,  0.86711711,  0.17597055),
					float3(0.70989842,  0.86875092,  0.16925712),
					float3(0.72039115,  0.87035015,  0.16260273),
					float3(0.73088902,  0.87191584,  0.15602894),
					float3(0.74138803,  0.87344918,  0.14956101),
					float3(0.75188414,  0.87495143,  0.14322828),
					float3(0.76237342,  0.87642392,  0.13706449),
					float3(0.77285183,  0.87786808,  0.13110864),
					float3(0.78331535,  0.87928545,  0.12540538),
					float3(0.79375994,  0.88067763,  0.12000532),
					float3(0.80418159,  0.88204632,  0.11496505),
					float3(0.81457634,  0.88339329,  0.11034678),
					float3(0.82494028,  0.88472036,  0.10621724),
					float3(0.83526959,  0.88602943,  0.1026459),
					float3(0.84556056,  0.88732243,  0.09970219),
					float3(0.8558096 ,  0.88860134,  0.09745186),
					float3(0.86601325,  0.88986815,  0.09595277),
					float3(0.87616824,  0.89112487,  0.09525046),
					float3(0.88627146,  0.89237353,  0.09537439),
					float3(0.89632002,  0.89361614,  0.09633538),
					float3(0.90631121,  0.89485467,  0.09812496),
					float3(0.91624212,  0.89609127,  0.1007168),
					float3(0.92610579,  0.89732977,  0.10407067),
					float3(0.93590444,  0.8985704 ,  0.10813094),
					float3(0.94563626,  0.899815  ,  0.11283773),
					float3(0.95529972,  0.90106534,  0.11812832),
					float3(0.96489353,  0.90232311,  0.12394051),
					float3(0.97441665,  0.90358991,  0.13021494),
					float3(0.98386829,  0.90486726,  0.13689671),
					float3(0.99324789,  0.90615657,  0.1439362) };

float3 jetCM[256] = { float3(0,0,0.51171875			),
float3(0,0,0.52734375			)							 ,
float3(0,0,0.54296875			)							 ,
float3(0,0,0.55859375			)							 ,
float3(0,0,0.57421875			)							 ,
float3(0,0,0.58984375			)							 ,
float3(0,0,0.60546875			)							 ,
float3(0,0,0.62109375			)							 ,
float3(0,0,0.63671875			)							 ,
float3(0,0,0.65234375			)							 ,
float3(0,0,0.66796875			)							 ,
float3(0,0,0.68359375			)							 ,
float3(0,0,0.69921875			)							 ,
float3(0,0,0.71484375			)							 ,
float3(0,0,0.73046875			)							 ,
float3(0,0,0.74609375			)							 ,
float3(0,0,0.76171875			)							 ,
float3(0,0,0.77734375			)							 ,
float3(0,0,0.79296875			)							 ,
float3(0,0,0.80859375			)							 ,
float3(0,0,0.82421875			)							 ,
float3(0,0,0.83984375			)							 ,
float3(0,0,0.85546875			)							 ,
float3(0,0,0.87109375			)							 ,
float3(0,0,0.88671875			)							 ,
float3(0,0,0.90234375			)							 ,
float3(0,0,0.91796875			)							 ,
float3(0,0,0.93359375			)							 ,
float3(0,0,0.94921875			)							 ,
float3(0,0,0.96484375			)							 ,
float3(0,0,0.98046875			)							 ,
float3(0,0,0.99609375			)							 ,
float3(0,0.015625,0.99609375	)							 ,
float3(0,0.03125,0.99609375	)								 ,
float3(0,0.046875,0.99609375	)							 ,
float3(0,0.0625,0.99609375	)								 ,
float3(0,0.078125,0.99609375	)							 ,
float3(0,0.09375,0.99609375	)								 ,
float3(0,0.109375,0.99609375	)							 ,
float3(0,0.125,0.99609375		)							 ,
float3(0,0.140625,0.99609375	)							 ,
float3(0,0.15625,0.99609375	)								 ,
float3(0,0.171875,0.99609375	)							 ,
float3(0,0.1875,0.99609375	)								 ,
float3(0,0.203125,0.99609375	)							 ,
float3(0,0.21875,0.99609375	)								 ,
float3(0,0.234375,0.99609375	)							 ,
float3(0,0.25,0.99609375		)							 ,
float3(0,0.265625,0.99609375	)							 ,
float3(0,0.28125,0.99609375	)								 ,
float3(0,0.296875,0.99609375	)							 ,
float3(0,0.3125,0.99609375	)								 ,
float3(0,0.328125,0.99609375	)							 ,
float3(0,0.34375,0.99609375	)								 ,
float3(0,0.359375,0.99609375	)							 ,
float3(0,0.375,0.99609375		)							 ,
float3(0,0.390625,0.99609375	)							 ,
float3(0,0.40625,0.99609375	)								 ,
float3(0,0.421875,0.99609375	)							 ,
float3(0,0.4375,0.99609375	)								 ,
float3(0,0.453125,0.99609375	)							 ,
float3(0,0.46875,0.99609375	)								 ,
float3(0,0.484375,0.99609375	)							 ,
float3(0,0.5,0.99609375		)								 ,
float3(0,0.51171875,0.99609375)								 ,
float3(0,0.52734375,0.99609375)								 ,
float3(0,0.54296875,0.99609375)								 ,
float3(0,0.55859375,0.99609375)								 ,
float3(0,0.57421875,0.99609375)								 ,
float3(0,0.58984375,0.99609375)								 ,
float3(0,0.60546875,0.99609375)								 ,
float3(0,0.62109375,0.99609375)								 ,
float3(0,0.63671875,0.99609375)								 ,
float3(0,0.65234375,0.99609375)								 ,
float3(0,0.66796875,0.99609375)								 ,
float3(0,0.68359375,0.99609375)								 ,
float3(0,0.69921875,0.99609375)								 ,
float3(0,0.71484375,0.99609375)								 ,
float3(0,0.73046875,0.99609375)								 ,
float3(0,0.74609375,0.99609375)								 ,
float3(0,0.76171875,0.99609375)								 ,
float3(0,0.77734375,0.99609375)								 ,
float3(0,0.79296875,0.99609375)								 ,
float3(0,0.80859375,0.99609375)								 ,
float3(0,0.82421875,0.99609375)								 ,
float3(0,0.83984375,0.99609375)								 ,
float3(0,0.85546875,0.99609375)								 ,
float3(0,0.87109375,0.99609375)								 ,
float3(0,0.88671875,0.99609375)								 ,
float3(0,0.90234375,0.99609375)								 ,
float3(0,0.91796875,0.99609375)								 ,
float3(0,0.93359375,0.99609375)								 ,
float3(0,0.94921875,0.99609375)								 ,
float3(0,0.96484375,0.99609375)								 ,
float3(0,0.98046875,0.99609375)								 ,
float3(0,0.99609375,0.99609375)								 ,
float3(0.015625,0.99609375,0.98046875)						 ,
float3(0.03125,0.99609375,0.96484375 )						 ,
float3(0.046875,0.99609375,0.94921875)						 ,
float3(0.0625,0.99609375,0.93359375  )						 ,
float3(0.078125,0.99609375,0.91796875)						 ,
float3(0.09375,0.99609375,0.90234375 )						 ,
float3(0.109375,0.99609375,0.88671875)						 ,
float3(0.125,0.99609375,0.87109375   )						 ,
float3(0.140625,0.99609375,0.85546875)						 ,
float3(0.15625,0.99609375,0.83984375 )						 ,
float3(0.171875,0.99609375,0.82421875)						 ,
float3(0.1875,0.99609375,0.80859375  )						 ,
float3(0.203125,0.99609375,0.79296875)						 ,
float3(0.21875,0.99609375,0.77734375 )						 ,
float3(0.234375,0.99609375,0.76171875)						 ,
float3(0.25,0.99609375,0.74609375	   )					 ,
float3(0.265625,0.99609375,0.73046875)						 ,
float3(0.28125,0.99609375,0.71484375 )						 ,
float3(0.296875,0.99609375,0.69921875)						 ,
float3(0.3125,0.99609375,0.68359375  )						 ,
float3(0.328125,0.99609375,0.66796875)						 ,
float3(0.34375,0.99609375,0.65234375 )						 ,
float3(0.359375,0.99609375,0.63671875)						 ,
float3(0.375,0.99609375,0.62109375   )						 ,
float3(0.390625,0.99609375,0.60546875)						 ,
float3(0.40625,0.99609375,0.58984375 )						 ,
float3(0.421875,0.99609375,0.57421875)						 ,
float3(0.4375,0.99609375,0.55859375  )						 ,
float3(0.453125,0.99609375,0.54296875)						 ,
float3(0.46875,0.99609375,0.52734375 )						 ,
float3(0.484375,0.99609375,0.51171875)						 ,
float3(0.5,0.99609375,0.5			   )					 ,
float3(0.51171875,0.99609375,0.484375)						 ,
float3(0.52734375,0.99609375,0.46875 )						 ,
float3(0.54296875,0.99609375,0.453125)						 ,
float3(0.55859375,0.99609375,0.4375  )						 ,
float3(0.57421875,0.99609375,0.421875)						 ,
float3(0.58984375,0.99609375,0.40625 )						 ,
float3(0.60546875,0.99609375,0.390625)						 ,
float3(0.62109375,0.99609375,0.375   )						 ,
float3(0.63671875,0.99609375,0.359375)						 ,
float3(0.65234375,0.99609375,0.34375 )						 ,
float3(0.66796875,0.99609375,0.328125)						 ,
float3(0.68359375,0.99609375,0.3125  )						 ,
float3(0.69921875,0.99609375,0.296875)						 ,
float3(0.71484375,0.99609375,0.28125 )						 ,
float3(0.73046875,0.99609375,0.265625)						 ,
float3(0.74609375,0.99609375,0.25	   )					 ,
float3(0.76171875,0.99609375,0.234375)						 ,
float3(0.77734375,0.99609375,0.21875 )						 ,
float3(0.79296875,0.99609375,0.203125)						 ,
float3(0.80859375,0.99609375,0.1875  )						 ,
float3(0.82421875,0.99609375,0.171875)						 ,
float3(0.83984375,0.99609375,0.15625 )						 ,
float3(0.85546875,0.99609375,0.140625)						 ,
float3(0.87109375,0.99609375,0.125   )						 ,
float3(0.88671875,0.99609375,0.109375)						 ,
float3(0.90234375,0.99609375,0.09375 )						 ,
float3(0.91796875,0.99609375,0.078125)						 ,
float3(0.93359375,0.99609375,0.0625  )						 ,
float3(0.94921875,0.99609375,0.046875)						 ,
float3(0.96484375,0.99609375,0.03125 )						 ,
float3(0.98046875,0.99609375,0.015625)						 ,
float3(0.99609375,0.99609375,0	   )						 ,
float3(0.99609375,0.98046875,0	   )						 ,
float3(0.99609375,0.96484375,0	   )						 ,
float3(0.99609375,0.94921875,0	   )						 ,
float3(0.99609375,0.93359375,0	   )						 ,
float3(0.99609375,0.91796875,0	   )						 ,
float3(0.99609375,0.90234375,0	   )						 ,
float3(0.99609375,0.88671875,0	   )						 ,
float3(0.99609375,0.87109375,0	   )						 ,
float3(0.99609375,0.85546875,0	   )						 ,
float3(0.99609375,0.83984375,0	   )						 ,
float3(0.99609375,0.82421875,0	   )						 ,
float3(0.99609375,0.80859375,0	   )						 ,
float3(0.99609375,0.79296875,0	   )						 ,
float3(0.99609375,0.77734375,0	   )						 ,
float3(0.99609375,0.76171875,0	   )						 ,
float3(0.99609375,0.74609375,0	   )						 ,
float3(0.99609375,0.73046875,0	   )						 ,
float3(0.99609375,0.71484375,0	   )						 ,
float3(0.99609375,0.69921875,0	   )						 ,
float3(0.99609375,0.68359375,0	   )						 ,
float3(0.99609375,0.66796875,0	   )						 ,
float3(0.99609375,0.65234375,0	   )						 ,
float3(0.99609375,0.63671875,0	   )						 ,
float3(0.99609375,0.62109375,0	   )						 ,
float3(0.99609375,0.60546875,0	   )						 ,
float3(0.99609375,0.58984375,0	   )						 ,
float3(0.99609375,0.57421875,0	   )						 ,
float3(0.99609375,0.55859375,0	   )						 ,
float3(0.99609375,0.54296875,0	   )						 ,
float3(0.99609375,0.52734375,0	   )						 ,
float3(0.99609375,0.51171875,0	   )						 ,
float3(0.99609375,0.5,0			   )						 ,
float3(0.99609375,0.484375,0		   )					 ,
float3(0.99609375,0.46875,0		   )						 ,
float3(0.99609375,0.453125,0		   )					 ,
float3(0.99609375,0.4375,0		   )						 ,
float3(0.99609375,0.421875,0		   )					 ,
float3(0.99609375,0.40625,0		   )						 ,
float3(0.99609375,0.390625,0		   )					 ,
float3(0.99609375,0.375,0			   )					 ,
float3(0.99609375,0.359375,0		   )					 ,
float3(0.99609375,0.34375,0		   )						 ,
float3(0.99609375,0.328125,0		   )					 ,
float3(0.99609375,0.3125,0		   )						 ,
float3(0.99609375,0.296875,0		   )					 ,
float3(0.99609375,0.28125,0		   )						 ,
float3(0.99609375,0.265625,0		   )					 ,
float3(0.99609375,0.25,0			   )					 ,
float3(0.99609375,0.234375,0		   )					 ,
float3(0.99609375,0.21875,0		   )						 ,
float3(0.99609375,0.203125,0		   )					 ,
float3(0.99609375,0.1875,0		   )						 ,
float3(0.99609375,0.171875,0		   )					 ,
float3(0.99609375,0.15625,0		   )						 ,
float3(0.99609375,0.140625,0		   )					 ,
float3(0.99609375,0.125,0			   )					 ,
float3(0.99609375,0.109375,0		   )					 ,
float3(0.99609375,0.09375,0		   )						 ,
float3(0.99609375,0.078125,0		   )					 ,
float3(0.99609375,0.0625,0		   )						 ,
float3(0.99609375,0.046875,0		   )					 ,
float3(0.99609375,0.03125,0		   )						 ,
float3(0.99609375,0.015625,0		   )					 ,
float3(0.99609375,0,0				   )					 ,
float3(0.98046875,0,0				   )					 ,
float3(0.96484375,0,0				   )					 ,
float3(0.94921875,0,0				   )					 ,
float3(0.93359375,0,0				   )					 ,
float3(0.91796875,0,0				   )					 ,
float3(0.90234375,0,0				   )					 ,
float3(0.88671875,0,0				   )					 ,
float3(0.87109375,0,0				   )					 ,
float3(0.85546875,0,0				   )					 ,
float3(0.83984375,0,0				   )					 ,
float3(0.82421875,0,0				   )					 ,
float3(0.80859375,0,0				   )					 ,
float3(0.79296875,0,0				   )					 ,
float3(0.77734375,0,0				   )					 ,
float3(0.76171875,0,0				   )					 ,
float3(0.74609375,0,0				   )					 ,
float3(0.73046875,0,0				   )					 ,
float3(0.71484375,0,0				   )					 ,
float3(0.69921875,0,0				   )					 ,
float3(0.68359375,0,0				   )					 ,
float3(0.66796875,0,0				   )					 ,
float3(0.65234375,0,0				   )					 ,
float3(0.63671875,0,0				   )					 ,
float3(0.62109375,0,0				   )					 ,
float3(0.60546875,0,0				   )					 ,
float3(0.58984375,0,0				   )					 ,
float3(0.57421875,0,0				   )					 ,
float3(0.55859375,0,0				   )					 ,
float3(0.54296875,0,0				   )					 ,
float3(0.52734375,0,0				   )					 ,
float3(0.51171875,0,0				   )					 ,
float3(0.5,0,0)};



					float val = value;
					if(val > max)
						val = max;

					float v = (value - min) / (max - min);
					int pos = v * 256;

					return jetCM[pos];
			}

			float3 HeatMapColorLog(float value, float min, float max)
			{
				
				//float val = value;
				if (value <= 0.00001)
				{
					value = 0.0001;
				}

				if (min <= 0.00001)
				{
					min = 0.0001;
				}
				
				float logMax = log(max);
				float logMin = log(min);
				
				float logDiff = logMax - logMin;
				float logDiffFraction = logDiff / 7.0; // divide the total into 7 color fractions														
													   
				float positions[8] = { logMin, logDiffFraction + logMin, logDiffFraction * 2 + logMin, logDiffFraction * 3 + logMin, logDiffFraction * 4 + logMin, logDiffFraction * 5 + logMin, logDiffFraction * 6 + logMin, logDiffFraction * 7 + logMin }; //  the positions at which colors change
				
				float val = log(value);
				// first interval (blue increases)
				if (val > positions[0] && val < positions[1])
				{
					float v = ((1.0)*val - positions[0]) / ((1.0)*positions[1] - positions[0]);
					return float3(0.0, 0.0, v);
				}

				// second interval (blue constant, green grows)
				if (val > positions[1] && val < positions[2])
				{
					float v = ((1.0)*val - positions[1]) / ((1.0)*positions[2] - positions[1]);
					return float3(0.0, v, 1.0);
				}

				// third interval (blue decrease, green constant)
				if (val > positions[2] && val < positions[3])
				{
					float v = ((1.0)*val - positions[2]) / ((1.0)*positions[3] - positions[2]);
					return float3(0.0, 1.0, (1.0 - v));
				}

				// fourth interval (red increases, green constant)
				if (val > positions[3] && val < positions[4])
				{
					float v = ((1.0)*val - positions[3]) / ((1.0)*positions[4] - positions[3]);
					return float3(v, 1.0, 0.0);
				}

				// fifth interval (red constnat, green decrease)
				if (val > positions[4] && val < positions[5])
				{
					float v = ((1.0)*val - positions[4]) / ((1.0)*positions[5] - positions[4]);
					return float3(1.0, (1.0 - v), 0.0);
				}

				// sixth interval (red constant, blue increases)
				if (val > positions[5] && val < positions[6])
				{
					float v = ((1.0)*val - positions[5]) / ((1.0)*positions[6] - positions[5]);
					return float3(1.0, 0.0, v);
				}

				// seventh interval (red constant, blue constant, green increases to white)
				if (val > positions[6] && val < positions[7])
				{
					float v = ((1.0)*val - positions[6]) / ((1.0)*positions[7] - positions[6]);
					return float3(1.0, v, 1.0);
				}

				if (val > max)
					return float3(1.0, 1.0, 1.0);

				return float3(0.0, 0.0, 0.0);
				
			}


			float3 getGradientColoc(float ch0Val, float ch1Val)
			{
				float2 p0 = float2(0.0, 0.0);
				float2 p1 = float2(1.0, 1.0);
				float2 q = float2(ch0Val, ch1Val);
				float a = (p1.x - p0.x);
				float b = (p1.y - p0.y);
				float c = (p0.y - p1.y);
				float d = (p1.x - p0.x);

				float det = (a*d-b*c);
				float2x2 inv = float2x2(
					d/det, -b/det,
					-c/det, a/det
					);

				float2 bAns = float2(q.x*a + q.y*b, p0.y*a - p0.x*b);

				float2 result = mul(inv, bAns);

				return float3(result.x, result.x, result.x);
			}

			float getGradientColocOpacity(float ch0Val, float ch1Val)
			{
				float2 p0 = float2(0.0, 0.0);
				float2 p1 = float2(1.0, 1.0);
				float2 q = float2(ch0Val, ch1Val);
				float a = (p1.x - p0.x);
				float b = (p1.y - p0.y);
				float c = (p0.y - p1.y);
				float d = (p1.x - p0.x);

				float det = (a*d - b*c);
				float2x2 inv = float2x2(
					d / det, -b / det,
					-c / det, a / det
					);

				float2 bAns = float2(q.x*a + q.y*b, p0.y*a - p0.x*b);

				float2 result = mul(inv, bAns);

				return result.x;
			}


			float3 getGradientColocInvHM(float ch0Val, float ch1Val, float max)
			{
				float2 p0 = float2(_chan0ThresholdHigh, _chan1ThresholdHigh);
				float2 p1 = float2(max, max);
				float2 q = float2(ch0Val, ch1Val);
				float a = (p1.x - p0.x);
				float b = (p1.y - p0.y);
				float c = (p0.y - p1.y);
				float d = (p1.x - p0.x);

				float det = (a*d - b*c);
				float2x2 inv = float2x2(
					d / det, -b / det,
					-c / det, a / det
					);

				float2 bAns = float2(q.x*a + q.y*b, p0.y*a - p0.x*b);

				float2 result = mul(inv, bAns);

				float value = (result.x - p0.x) / (p1.x - p0.x);

		//		return float3(value, value, value);

				//return HeatMapColorRainbow(value, 0, max);
				return HeatMapViridis(value, 0, max);
			}

			float3 getGradientColocHM_Web(float ch0Val, float ch1Val, float max)
			{
				//https://stackoverflow.com/questions/1811549/perpendicular-on-a-line-from-a-given-point/1811636#1811636
				float2 p1 = float2(_chan0ThresholdHigh, _chan1ThresholdHigh);
				float2 p2 = float2(max, max);
				float2 p3 = float2(ch0Val, ch1Val);

				float k = ((p2.y - p1.y) * (p3.x - p1.x) - (p2.x - p1.x) * (p3.y - p1.y)) / ((p2.y - p1.y) * (p2.y - p1.y) + (p2.x - p1.x) *(p2.x - p1.x));
				float result = p3.x - k * (p2.y - p1.y);

				float value = (result - p1.x) / (p2.x - p1.x);

				//		return float3(value, value, value);

				//return HeatMapColorRainbow(value, 0, max);
				return HeatMapViridis(value, 0, max);
			}

			float3 getGradientColocHM(float ch0Val, float ch1Val, float max)
			{
				//https://en.wikipedia.org/wiki/Vector_projection
				float2 p1 = float2(_chan0ThresholdHigh, _chan1ThresholdHigh);
				float2 p2 = float2(max, max);
				float2 p3 = float2(ch0Val, ch1Val);

				float k = ((p2.y - p1.y) * (p3.x - p1.x) - (p2.x - p1.x) * (p3.y - p1.y)) / ((p2.y - p1.y) * (p2.y - p1.y) + (p2.x - p1.x) *(p2.x - p1.x));
				float result = p3.x - k * (p2.y - p1.y);

				float value = (result - p1.x) / (p2.x - p1.x);

				// this is using the https://sites.google.com/site/colocalizationcolormap/home formula
				//value = (((ch0Val - _ch0Average)*(ch1Val - _ch1Average)) / ((_ch0Max - _ch0Average)*(_ch1Max - _ch1Average)));
				//return HeatMapColorRainbow(value, 0, 1);

				//value = (ch0Val - _ch0Average)*(ch1Val - _ch1Average)/1; //PCC _PCC_denom
				//value = (ch0Val)*(ch1Val)/1; // MOC _MOC_denom
				

				return HeatMapColorRainbow(value, 0, max);
				//return HeatMapColorRainbowSolidBreak(value, 0, max);
				//return HeatMapViridis(value, 0, max);
			}

			float3 getGradientColocHMWithDist(float ch0Val, float ch1Val, float max)
			{
				//https://en.wikipedia.org/wiki/Vector_projection
				float2 p1 = float2(_p1.x, _p1.y);//float2(_chan0ThresholdHigh, _chan1ThresholdHigh);
				float2 p2 = float2(_p2.x, _p2.y);//float2(max, max);
				float2 p3 = float2(ch0Val, ch1Val);

				float k = ((p2.y - p1.y) * (p3.x - p1.x) - (p2.x - p1.x) * (p3.y - p1.y)) / ((p2.y - p1.y) * (p2.y - p1.y) + (p2.x - p1.x) *(p2.x - p1.x));
				float result = p3.x - k * (p2.y - p1.y);

				// in case the point is above the line make it the max
				float m = (p2.y-p1.y)/(p2.x-p1.x);
				float c = p2.y - m*p2.x;
				float inverseC = p2.y + 1/m*p2.x;

				float value = 0;
				if(p3.y < (-1/m)*p3.x + inverseC)
					value = ((result - p1.x) / (p2.x - p1.x));
				else
					value = 1;
				
				if(value > 1)
					value = 1;
				

				//http://mathworld.wolfram.com/Point-LineDistance2-Dimensional.html
				float dis = (abs((p2.y-p1.y)*p3.x - (p2.x-p1.x)*p3.y + p2.x*p1.y - p2.y*p1.x))/sqrt((p2.y-p1.y)*(p2.y-p1.y) + (p2.x-p1.x)*(p2.x-p1.x))*255;
				if(dis <_distThresh)
					value = value*255 - dis*tan(_angle * 3.14159 / 180);
				else
					value = 0;

				if(value < 0)
					value = 0;

				//return HeatMapArray(value);
				return HeatMapColorRainbow(value, 0, max*255);
				//return HeatMapViridis(value, 0, max*255);

				// inverse multiplication
				//float invDis = 1 / dis;
				//value = value*invDis;
				//return HeatMapColorRainbow(value, 0, max);




				// this is using the https://sites.google.com/site/colocalizationcolormap/home formula
				//value = (((ch0Val - _ch0Average)*(ch1Val - _ch1Average)) / ((_ch0Max - _ch0Average)*(_ch1Max - _ch1Average)));
				//return HeatMapColorRainbow(value, 0, 1);

				//value = (ch0Val - _ch0Average)*(ch1Val - _ch1Average)/1; //PCC _PCC_denom
				//value = (ch0Val)*(ch1Val)/1; // MOC _MOC_denom
				

				
				//return HeatMapColorRainbowSolidBreak(value, 0, max);
				
			}

			float3 getHeatmapValue(float ch0Val, float ch1Val)
			{
				float2 p1 = float2(_p1.x, _p1.y);//float2(_chan0ThresholdHigh, _chan1ThresholdHigh);
				float2 p2 = float2(_p2.x, _p2.y);//float2(max, max);
				float2 p3 = float2(ch0Val, ch1Val);
				
				float k = ((p2.y - p1.y) * (p3.x - p1.x) - (p2.x - p1.x) * (p3.y - p1.y)) / ((p2.y - p1.y) * (p2.y - p1.y) + (p2.x - p1.x) *(p2.x - p1.x));
				float xi = p3.x - k * (p2.y - p1.y);
				
				float value = 0;
			    float x_min = p1[0];
				//x_max = x_max;
				//https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line#Line_defined_by_two_points
				float dis = (abs((p2.y - p1.y) * p3.x - (p2.x - p1.x) * p3.y + p2.x * p1.y - p2.y * p1.x)) / sqrt((p2.y - p1.y) * (p2.y - p1.y) + (p2.x - p1.x) * (p2.x - p1.x));
				if (xi <= (dis * (_x_max - x_min) * tan(_angle * 3.14159 / 180) + x_min) || dis > _distThresh/255)
					value = 0;
				else if ((dis * (_x_max - x_min) * tan(_angle * 3.14159 / 180) + x_min) < xi && xi < _x_max)
					value = ((xi - x_min) / (_x_max- x_min)) - dis * tan(_angle *  3.14159 / 180);
				else if (xi >= _x_max)
					value = 1 - dis * tan(_angle * 3.14159 / 180);

				int index = value*255;

				if(index > 255)
					index = 255;
				if (index < 0)
					index = 0;
				//return HeatMapArray(value*255);
				//return HeatMapArrayViridis(value * 255);
				return HeatMapArrayMagma(value*255);
			}


			float3 getGradientColocAverage(float ch0Val, float ch1Val, float max)
			{
				float average = (ch0Val + ch1Val) / 2.0;
				float min = (_chan1ThresholdHigh + _chan0ThresholdHigh) / 2.0; // this is the minimum value that average can be
				float value = (average - min) / (max - min);

				return float3(value, value, value);
			}


			//nMDP
			float3 getGradientColocAverageHM(float ch0Val, float ch1Val, float max)
			{
			
			
				// this is using the https://sites.google.com/site/colocalizationcolormap/home formula
				//float value = (((ch0Val - _ch0Average)*(ch1Val - _ch1Average)) / ((_ch0Max - _ch0Average)*(_ch1Max - _ch1Average)));
				
				float value = (((ch0Val - _ch0AverageAboveThres)*(ch1Val - _ch1AverageAboveThres)) / ((_ch0Max - _ch0AverageAboveThres)*(_ch1Max - _ch1AverageAboveThres))); // only above thres
				//float value = (((ch0Val - _ch0AverageNMDP)*(ch1Val - _ch1AverageNMDP)) / ((_ch0MaxNMDP - _ch0AverageNMDP)*(_ch1MaxNMDP - _ch1AverageNMDP))); // "sobel"
				/*
				if((ch1Val) < 1)
					return float3(1,1,1);
				else
					return float3(0,0,0);*/
				
				//return _viridisCM[(value/max)*256];
				return HeatMapColorNMDP(value, max*_nmdp_minMultFactor/255.0, max*_nmdp_maxMultFactor/255.0);					
			
			}

			//nMDP sobel
			float3 getGradientColocAverageHMSobel(float ch0Val, float ch1Val, float max)
			{
			
			
				// this is using the https://sites.google.com/site/colocalizationcolormap/home formula
				//float value = (((ch0Val - _ch0Average)*(ch1Val - _ch1Average)) / ((_ch0Max - _ch0Average)*(_ch1Max - _ch1Average)));
				
				//float value = (((ch0Val - _ch0AverageAboveThres)*(ch1Val - _ch1AverageAboveThres)) / ((_ch0Max - _ch0AverageAboveThres)*(_ch1Max - _ch1AverageAboveThres))); // only above thres
				float value = (((ch0Val - _ch0AverageNMDP)*(ch1Val - _ch1AverageNMDP)) / ((_ch0MaxNMDP - _ch0AverageNMDP)*(_ch1MaxNMDP - _ch1AverageNMDP))); // "sobel"
				/*
				if((ch1Val) < 1)
					return float3(1,1,1);
				else
					return float3(0,0,0);*/
				
				//return _viridisCM[(value/max)*256];
				return HeatMapColorNMDP(value, max*_nmdp_minMultFactor/255.0, max*_nmdp_maxMultFactor/255.0);					
			
			}


			// Fragment Shader
			float4 frag (fragInput i) : COLOR
			{
				float4 outColor;

				//if (tex2D(_ROI_XY, i.uv).r < 0.5 || tex2D(_ROI_XZ, float2(i.uv.x, i.uv.z)).r < 0.5 || tex2D(_ROI_YZ, float2(i.uv.y, i.uv.z)).r < 0.5);
				if(_useROIMask > 0.5)
				{
					if(tex3D(_ROIMask3D, i.uv).r < 0.5)
						return float4(0.0, 0.0, 0.0, 0.0);
				}

				//return ((ROIMask_XY[maskCol, maskRow] && ROIMask_XZ[maskCol, depthToZ] && ROIMask_YZ[maskRow, depthToZ] && ROIisInside) || (((!ROIMask_XY[maskCol, maskRow] && (ROIMask_XZ[maskCol, depthToZ] && ROIMask_YZ[maskRow, depthToZ])) || (!ROIMask_XZ[maskCol, depthToZ] && !ROIMask_YZ[maskRow, depthToZ])) && !ROIisInside));

				//float3 texColor = tex3D(_Volume, i.uv).xyz;
				//TODO: check that the purple component isn't over or under illuminated
				//TODO: The 0.5 factor is just a thumbsuck value... really determine what it should be
				// normal Rendering
				float3 texColor = float3(tex3D(_VolumeRed, i.uv).r*_redOpacity*_redOnOff + tex3D(_VolumePurple, i.uv).r*_purpleOpacity*_purpleOnOff, tex3D(_VolumeGreen, i.uv).g*_greenOpacity*_greenOnOff, tex3D(_VolumeBlue, i.uv).b*_blueOpacity*_blueOnOff + tex3D(_VolumePurple, i.uv).r*_purpleOpacity*_purpleOnOff);
				//for cyan green and magenta for red
				//float3 texColor = float3(tex3D(_VolumeRed, i.uv).r*_redOpacity*_redOnOff, tex3D(_VolumeGreen, i.uv).g*_greenOpacity*_greenOnOff, tex3D(_VolumeRed, i.uv).r*_redOpacity*_redOnOff + tex3D(_VolumeGreen, i.uv).g*_greenOpacity*_greenOnOff);


				// colocalization code
				float chan0Value = 0.0;
				float chan1Value = 0.0;

				// determine which channels to use
				switch (_colChannel0)
				{
				case 0: chan0Value = tex3D(_VolumeRed, i.uv).r*_redOpacity*_redOnOff; break;	//TODO: reconsider using redOpacity
				case 1: chan0Value = tex3D(_VolumeGreen, i.uv).g*_greenOpacity*_greenOnOff; break;
				case 2: chan0Value = tex3D(_VolumeBlue, i.uv).b*_blueOpacity*_blueOnOff; break;
				case 3: chan0Value = tex3D(_VolumePurple, i.uv).r*_purpleOpacity*_purpleOnOff; break;
				}

				switch (_colChannel1)
				{
				case 0: chan1Value = tex3D(_VolumeRed, i.uv).r*_redOpacity*_redOnOff; break;	//TODO: reconsider using redOpacity
				case 1: chan1Value = tex3D(_VolumeGreen, i.uv).g*_greenOpacity*_greenOnOff; break;
				case 2: chan1Value = tex3D(_VolumeBlue, i.uv).b*_blueOpacity*_blueOnOff; break;
				case 3: chan1Value = tex3D(_VolumePurple, i.uv).r*_purpleOpacity*_purpleOnOff; break;
				}

				bool thresholdCond = false;
				// determine the condition
				switch (_colThresIntervalDisplay)
				{
				case 0: thresholdCond = (chan0Value > _chan0ThresholdHigh && chan1Value > _chan1ThresholdHigh); break;
				case 1: thresholdCond = (chan0Value <= _chan0ThresholdHigh && chan1Value <= _chan1ThresholdHigh && chan0Value >= _chan0ThresholdLow && chan1Value >= _chan1ThresholdLow); break;
				case 2: thresholdCond = (chan0Value < _chan0ThresholdLow && chan1Value < _chan1ThresholdLow); break;
				}

				if (_colocalizationMethod == 0)	//overlay white
				{
					if (thresholdCond)
					{
						texColor = float3(1.0, 1.0, 1.0);
						//texColor = getGradientColocAverage(chan0Value, chan1Value);
						//texColor = getGradientColoc(chan0Value, chan1Value);
						//sample.a = colocalizationOpacity;
					}
					else
					{
						//sample = vec3(0.0);
					}
				}
				else if (_colocalizationMethod == 1) // show only colocalized area (in colour)
				{
					if (thresholdCond)
					{
						//sample = vec3(1.0);
						//sample.a = colocalizationOpacity;
					}
					else
					{
						texColor = float3(0.0, 0.0, 0.0);
					}
				}
				else if (_colocalizationMethod == 2) // show only colocalized area (in white)
				{
					if (thresholdCond)
					{
						texColor = float3(1.0, 1.0, 1.0);
						//texColor = getGradientColocAverage(chan0Value, chan1Value, _maxValue);						
						//sample.a = colocalizationOpacity;
					}
					else
					{
						texColor = float3(0.0, 0.0, 0.0);			
					}
				}
				else if (_colocalizationMethod == 3) // show only colocalized area (as heatmap)
				{
					if (thresholdCond)
					{
						//texColor = float3(1.0, 1.0, 1.0);
						//texColor = getGradientColocAverage(chan0Value, chan1Value, _maxValue);
										
						//texColor = getGradientColocHMWithDist(chan0Value, chan1Value, _maxValue); // with perpendicular  <--- use this one

						texColor = getHeatmapValue(chan0Value, chan1Value); // <--- new version
						//texColor = getGradientColocHM(chan0Value, chan1Value, _maxValue); // with perpendicular
						
						//sample.a = colocalizationOpacity;
					}
					else
					{
						texColor = float3(0.0, 0.0, 0.0);
					}
				}
				else if (_colocalizationMethod == 4) // show only colocalized area (as heatmap) nMDP
				{
					if (thresholdCond) // above thresh
					//if((chan0Value > _chan0ThresholdHigh || chan1Value > _chan1ThresholdHigh)) // sobel
					//if (texColor.x > _Threshold && texColor.y > _Threshold && texColor.z > _Threshold)
					{
						//texColor = getGradientColocAverageHM(chan0Value, chan1Value, _maxValue);	 //with averages <---- nMDP
						texColor = getGradientColocAverageHM(chan0Value, chan1Value, 1.0f);	 //with averages <---- nMDP
				
					}
					else
					{
						texColor = float3(0.0, 0.0, 0.0);
					}
				}
				else if (_colocalizationMethod == 5) // show only colocalized area (as heatmap) nMDP sobel
				{
					//if (thresholdCond) // above thresh
					if((chan0Value > _chan0ThresholdHigh || chan1Value > _chan1ThresholdHigh)) // sobel
					//if (texColor.x > _Threshold && texColor.y > _Threshold && texColor.z > _Threshold)
					{
						//texColor = getGradientColocAverageHM(chan0Value, chan1Value, _maxValue);	 //with averages <---- nMDP
						texColor = getGradientColocAverageHMSobel(chan0Value, chan1Value, 1.0f);	 //with averages <---- nMDP
				
					}
					else
					{
						texColor = float3(0.0, 0.0, 0.0);
					}
				}
				else if (_colocalizationMethod == 10) // show only colocalized area (in white based on intensity)
				{
					if (thresholdCond)
					{
						//texColor = float3(1.0, 1.0, 1.0);
						texColor = getGradientColocAverage(chan0Value, chan1Value, _maxValue);						
						//sample.a = colocalizationOpacity;
					}
					else
					{
						texColor = float3(0.0, 0.0, 0.0);			
					}
				}								
				else // don't do colocalization
				{

				}
				/*
				// value tester
				if(_maxValue > 1.0)
				{
					texColor = float3(0.0, 1.0, 1.0);	
				}*/


				//float threshold = 0.06;
				if (texColor.x < _Threshold && texColor.y < _Threshold && texColor.z < _Threshold)
					outColor = float4(0.0, 0.0, 0.0, 0.0);
				else
				{
					if((_colocalizationMethod > 5 && _colocalizationMethod != 10) || (texColor.x != 1.0 && texColor.y != 1.0 && texColor.z != 1.0 &&  _colocalizationMethod != 1 && _colocalizationMethod != 3 && _colocalizationMethod != 4 && _colocalizationMethod != 5)) //texColor.xyz != float3(1.0, 1.0, 1.0) &&
						outColor = float4(texColor, _Opacity); //0.05 //getGradientColocOpacity(chan0Value, chan1Value)*
					else
						outColor = float4(texColor, _colocalizationOpacity); //0.05
				}

			    return outColor;
			}
			 
			ENDCG
		 
		}
	}
	 
	Fallback "VertexLit"
}